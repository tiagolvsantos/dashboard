{
  "version": 7,
  "createdAt": 1714481939458,
  "updatedAt": 1714495304211,
  "name": "main_dash copy 1",
  "id": "main-dash-copy-1",
  "states": {
    "panes": {
      "_id": "panes",
      "locked": false,
      "layout": [
        {
          "i": "chart copy 3",
          "type": "chart",
          "y": 0,
          "x": 0,
          "w": 6,
          "h": 10,
          "moved": false
        },
        {
          "i": "chart copy 4",
          "type": "chart",
          "w": 6,
          "h": 10,
          "y": 0,
          "x": 6,
          "moved": false
        },
        {
          "i": "chart copy 6",
          "type": "chart",
          "w": 9,
          "h": 14,
          "y": 10,
          "x": 15,
          "moved": false
        },
        {
          "i": "chart copy 1",
          "type": "chart",
          "x": 0,
          "y": 10,
          "w": 9,
          "h": 7,
          "moved": false
        },
        {
          "i": "chart copy 2",
          "type": "chart",
          "x": 9,
          "y": 10,
          "w": 6,
          "h": 14,
          "moved": false
        },
        {
          "i": "chart copy 5",
          "type": "chart",
          "x": 0,
          "y": 17,
          "w": 9,
          "h": 7,
          "moved": false
        },
        {
          "i": "chart",
          "type": "chart",
          "x": 12,
          "y": 0,
          "w": 6,
          "h": 10,
          "moved": false
        },
        {
          "i": "alerts",
          "type": "alerts",
          "x": 18,
          "y": 0,
          "w": 6,
          "h": 4,
          "moved": false
        },
        {
          "i": "chart copy 7",
          "type": "chart",
          "x": 18,
          "y": 4,
          "w": 6,
          "h": 6,
          "moved": false
        }
      ],
      "panes": {
        "chart copy 3": {
          "id": "chart copy 3",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:solusd_perp",
            "BINANCE_FUTURES:solusdt",
            "BINANCE:solfdusd",
            "BINANCE:solusdt",
            "BITFINEX:SOLF0:USTF0",
            "BITFINEX:SOLUSD",
            "BITFINEX:SOLUST",
            "BITGET:SOLUSDC",
            "BITGET:SOLUSDT",
            "BITGET:SOLUSDT_UMCBL",
            "BITMEX:SOLUSD",
            "BITMEX:SOLUSDT",
            "BYBIT:SOLUSDT",
            "COINBASE:SOL-USD",
            "COINBASE:SOL-USDT",
            "DERIBIT:SOL_USDC-PERPETUAL",
            "HUOBI:SOL-USDT",
            "KRAKEN:SOL/USD",
            "OKEX:SOL-USDT",
            "OKEX:SOL-USDT-SWAP"
          ]
        },
        "chart copy 4": {
          "id": "chart copy 4",
          "name": "",
          "type": "chart",
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "cvd": {
                "enabled": true,
                "name": "CVD",
                "description": "Cumulative Volume Delta",
                "script": "_vbuy=(BINANCE:btcusdt.vbuy)\n\n_vsell=(BINANCE:btcusdt.vsell)\n\nline(cum(_vbuy-_vsell), title=BINANCE SPOT USDT)",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgb(255,235,59)",
                  "scaleMargins": {
                    "top": 0.11,
                    "bottom": 0.07
                  },
                  "lastValueVisible": false
                },
                "id": "cvd",
                "createdAt": 1673293819993,
                "updatedAt": null,
                "series": [
                  "cvd copy 4"
                ],
                "unsavedChanges": true
              },
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
                "options": {
                  "priceScaleId": "price",
                  "priceFormat": {
                    "auto": true,
                    "precision": 1,
                    "minMove": 0.1
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": true,
                  "upColor": "rgb(255,255,255)",
                  "downColor": "rgb(0,0,0)",
                  "borderUpColor": "rgb(0,0,0)",
                  "borderDownColor": "rgb(255,255,255)",
                  "wickUpColor": "rgb(255,255,255)",
                  "wickDownColor": "rgb(255,255,255)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.11,
                    "bottom": 0.07
                  },
                  "visible": true,
                  "priceLineStyle": 0,
                  "lineType": 0,
                  "lineStyle": 0
                },
                "id": "price",
                "createdAt": 1657340969806,
                "updatedAt": 1689459121231,
                "series": [
                  "price copy 12"
                ],
                "unsavedChanges": true,
                "displayName": "Price",
                "navigationState": {
                  "sections": [
                    "position",
                    "colors"
                  ],
                  "tab": 0,
                  "optionsQuery": "",
                  "fontSize": 1
                },
                "preview": {}
              }
            },
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.26
                },
                "priceFormat": {
                  "precision": 1,
                  "minMove": 0.1
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.11,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "liquidations": {
                "scaleMargins": {
                  "top": 0.82,
                  "bottom": 0.1
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "price": {
                "scaleMargins": {
                  "top": 0.11,
                  "bottom": 0.07
                },
                "indicators": [
                  "Price"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "900",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": true,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 5.9166956333965715,
            "navigationState": {
              "tab": "script",
              "optionsQuery": "",
              "fontSizePx": 17
            }
          },
          "markets": [
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:ethbusd",
            "BINANCE:ethfdusd",
            "BINANCE:ethusdc",
            "BINANCE:ethusdt",
            "BITFINEX:ETHF0:USTF0",
            "BITFINEX:ETHUSD",
            "BITFINEX:ETHUST",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDC",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BITMEX:ETH_USDT",
            "BITMEX:ETHUSD",
            "BITMEX:ETHUSDT",
            "BITSTAMP:ethusd",
            "BITSTAMP:ethusdt",
            "BYBIT:ETHUSD",
            "BYBIT:ETHUSDC-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "DERIBIT:ETH_USDC-PERPETUAL",
            "DERIBIT:ETH-PERPETUAL",
            "HUOBI:ETH-USD",
            "HUOBI:ETH-USDT",
            "HUOBI:ethusdc",
            "HUOBI:ethusdd",
            "HUOBI:ethusdt",
            "KRAKEN:ETH/USD",
            "KRAKEN:ETH/USDC",
            "KRAKEN:ETH/USDT",
            "KRAKEN:PI_ETHUSD",
            "KUCOIN:ETH-USDC",
            "KUCOIN:ETH-USDT",
            "KUCOIN:ETHUSDCM",
            "KUCOIN:ETHUSDM",
            "KUCOIN:ETHUSDTM",
            "MEXC:ETH_USD",
            "MEXC:ETH_USDT",
            "MEXC:ETHUSDT",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDC",
            "OKEX:ETH-USDC-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP",
            "POLONIEX:ETH_USDC",
            "POLONIEX:ETH_USDT"
          ]
        },
        "chart copy 6": {
          "id": "chart copy 6",
          "name": "",
          "type": "chart",
          "settings": {
            "indicatorsErrors": {
              "usdt-spot": "Unexpected token ')'",
              "usdc-spot": null,
              "usdc-perp": null
            },
            "indicators": {
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
                "options": {
                  "priceScaleId": "price",
                  "priceFormat": {
                    "auto": true,
                    "precision": 1,
                    "minMove": 0.1
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": true,
                  "upColor": "rgb(255,255,255)",
                  "downColor": "rgb(0,0,0)",
                  "borderUpColor": "rgb(0,0,0)",
                  "borderDownColor": "rgb(255,255,255)",
                  "wickUpColor": "rgb(255,255,255)",
                  "wickDownColor": "rgb(255,255,255)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.11,
                    "bottom": 0.07
                  },
                  "visible": true,
                  "priceLineStyle": 0,
                  "lineType": 0,
                  "lineStyle": 0
                },
                "id": "price",
                "createdAt": 1657340969806,
                "updatedAt": 1689459121231,
                "series": [
                  "price"
                ],
                "unsavedChanges": true,
                "displayName": "Price",
                "navigationState": {
                  "sections": [
                    "position",
                    "colors"
                  ],
                  "tab": 0,
                  "optionsQuery": "",
                  "fontSize": 1
                },
                "preview": {}
              },
              "usdc-spot": {
                "enabled": true,
                "name": "USDC SPOT",
                "description": "Cumulative Volume Delta",
                "script": "_vbuy=(BINANCE:btcusdc.vbuy+BITGET:BTCUSDC.vbuy+BYBIT:BTCUSDC-SPOT.vbuy+KRAKEN:XBT/USDC.vbuy+KUCOIN:BTC-USDC.vbuy+OKEX:BTC-USDC.vbuy)\n\n_vsell=(BINANCE:btcusdc.vsell+BITGET:BTCUSDC.vsell+BYBIT:BTCUSDC-SPOT.vsell+KRAKEN:XBT/USDC.vsell+KUCOIN:BTC-USDC.vsell+OKEX:BTC-USDC.vsell)\n\nline(cum(_vbuy-_vsell), title=USDC SPOT)",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgb(41,98,255)",
                  "scaleMargins": {
                    "top": 0.11,
                    "bottom": 0.07
                  },
                  "lastValueVisible": false
                },
                "id": "usdc-spot",
                "createdAt": 1673293819993,
                "updatedAt": null,
                "series": [
                  "usdc-spot copy 13"
                ],
                "unsavedChanges": true,
                "displayName": "USDC SPOT"
              },
              "usdc-perp": {
                "script": "_vbuy=(DERIBIT:BTC_USDC-PERPETUAL.vbuy+OKEX:BTC-USDC-SWAP.vbuy)\n\n_vsell=(DERIBIT:BTC_USDC-PERPETUAL.vsell+OKEX:BTC-USDC-SWAP.vsell)\n\nline(cum(_vbuy-_vsell), title=USDC PERP)",
                "name": "USDC PERP",
                "description": "Cumulative Volume Delta",
                "options": {
                  "priceScaleId": "cvd",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgb(12,50,153)",
                  "scaleMargins": {
                    "top": 0.11,
                    "bottom": 0.07
                  },
                  "lastValueVisible": false
                },
                "id": "usdc-perp",
                "series": [
                  "usdc-perp copy 8"
                ],
                "unsavedChanges": true,
                "displayName": "USDC PERP"
              }
            },
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.26
                },
                "priceFormat": {
                  "precision": 1,
                  "minMove": 0.1
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.11,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "liquidations": {
                "scaleMargins": {
                  "top": 0.82,
                  "bottom": 0.1
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "price": {
                "scaleMargins": {
                  "top": 0.11,
                  "bottom": 0.07
                },
                "indicators": [
                  "Price"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "900",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": true,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {
              "BINANCE_FUTURES:btcusd_perp": false,
              "BITMEX:XBTUSD": false,
              "BYBIT:BTCUSD": false,
              "DERIBIT:BTC-PERPETUAL": false,
              "BINANCE_FUTURES:btcusdt": false,
              "BINANCE_FUTURES:btcbusd": false,
              "BITFINEX:BTCF0:USTF0": false,
              "BITMEX:XBTUSDT": false,
              "BYBIT:BTCUSDT": false,
              "KRAKEN:PI_XBTUSD": false,
              "OKEX:BTC-USD-SWAP": false,
              "OKEX:BTC-USDT-SWAP": false,
              "BITGET:BTCPERP_CMCBL": false,
              "BITGET:BTCUSD_DMCBL": false,
              "BITGET:BTCUSDT_UMCBL": false,
              "BITMEX:XBT_USDT": false,
              "DERIBIT:BTC_USDC-PERPETUAL": false,
              "KUCOIN:XBTUSDM": false,
              "KUCOIN:XBTUSDTM": false,
              "MEXC:BTC_USD": false,
              "MEXC:BTC_USDT": false,
              "OKEX:BTC-USDC-SWAP": false,
              "BITFINEX:BTCUSD": false,
              "COINBASE:BTC-USD": false,
              "BINANCE:btcusdt": false,
              "BINANCE:btcbusd": false,
              "BITFINEX:BTCUST": false,
              "COINBASE:BTC-USDT": false,
              "BITSTAMP:btcusd": false,
              "BINANCE:btcusdc": false,
              "BITGET:BTCUSDC": false,
              "BITGET:BTCUSDT": false,
              "BITSTAMP:btcusdt": false,
              "BYBIT:BTCUSDC-SPOT": false,
              "BYBIT:BTCUSDT-SPOT": false,
              "KRAKEN:XBT/USD": false,
              "KRAKEN:XBT/USDC": false,
              "KRAKEN:XBT/USDT": false,
              "KUCOIN:BTC-USDC": false,
              "KUCOIN:BTC-USDT": false,
              "MEXC:BTCUSDT": false,
              "OKEX:BTC-USDC": false,
              "OKEX:BTC-USDT": false
            },
            "barSpacing": 2.821282580194866,
            "navigationState": {
              "tab": "script",
              "optionsQuery": "",
              "fontSizePx": 16
            }
          },
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BITFINEX:BTCUSD",
            "BITMEX:XBTUSD",
            "BYBIT:BTCUSD",
            "COINBASE:BTC-USD",
            "DERIBIT:BTC-PERPETUAL",
            "BINANCE:btcusdt",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE_FUTURES:btcbusd",
            "BITFINEX:BTCUST",
            "BITFINEX:BTCF0:USTF0",
            "BITMEX:XBTUSDT",
            "BYBIT:BTCUSDT",
            "COINBASE:BTC-USDT",
            "BITSTAMP:btcusd",
            "KRAKEN:PI_XBTUSD",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDT-SWAP",
            "BINANCE:btcusdc",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT-SPOT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT"
          ]
        },
        "chart copy 1": {
          "id": "chart copy 1",
          "name": "",
          "type": "chart",
          "zoom": 1.25,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "_7wdaz6pi7ln05htf": {
                "id": "_7wdaz6pi7ln05htf",
                "libraryId": "price",
                "name": "Price",
                "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
                "createdAt": 1702545199397,
                "updatedAt": 1714153707454,
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 1
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": true,
                  "upColor": "rgb(59,202,109)",
                  "downColor": "rgb(214,40,40)",
                  "borderUpColor": "rgb(59,202,109)",
                  "borderDownColor": "rgb(239,67,82)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgb(239,67,82)",
                  "useGaps": false,
                  "useHeikinAshi": false
                },
                "optionsDefinitions": {},
                "series": [
                  "price"
                ],
                "displayName": "Price"
              },
              "_sx7x9qvn20y0tx8g": {
                "id": "_sx7x9qvn20y0tx8g",
                "libraryId": "liquidation-heatmap",
                "name": "Liquidation Heatmap",
                "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=0,type=range,min=0,max=220,log=true)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.01,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (ratio < 0.001) {\n    continue\n  }\n  \n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
                "createdAt": 1703543399433,
                "updatedAt": 1714153726840,
                "options": {
                  "priceScaleId": "right"
                },
                "optionsDefinitions": {
                  "leverages": {
                    "default": "5|20|100",
                    "type": "text"
                  },
                  "threshold": {
                    "default": 0,
                    "type": "range",
                    "min": 0,
                    "max": 220,
                    "log": true
                  },
                  "fadeOut": {
                    "default": 0,
                    "type": "range",
                    "min": 0,
                    "max": 1,
                    "log": true,
                    "step": 0.001
                  },
                  "stepScale": {
                    "default": 0.5,
                    "type": "range",
                    "min": 0,
                    "max": 2,
                    "step": 0.01
                  },
                  "stepValue": {
                    "default": "",
                    "type": "text",
                    "placeholder": "empty = ATR"
                  },
                  "strength": {
                    "default": 0.25,
                    "type": "range",
                    "min": 0,
                    "max": 10,
                    "step": 0.01,
                    "log": true
                  },
                  "quote": {
                    "default": 0,
                    "type": "list",
                    "options": [
                      null,
                      "USD",
                      "USDT",
                      "TUSD",
                      "USDC"
                    ],
                    "rebuild": true
                  },
                  "exchange": {
                    "default": 0,
                    "type": "exchange",
                    "rebuild": true
                  },
                  "type": {
                    "default": "perp",
                    "type": "list",
                    "options": [
                      null,
                      "spot",
                      "perp"
                    ],
                    "rebuild": true
                  },
                  "src": {
                    "default": "high/low",
                    "type": "list",
                    "options": [
                      "open",
                      "high",
                      "low",
                      "close",
                      "hl2",
                      "ohl3",
                      "ohlc4",
                      "hlcc4",
                      "high/low",
                      "low/high"
                    ]
                  },
                  "color0": {
                    "default": "rgba(0,0,0,0)",
                    "type": "color"
                  },
                  "color1": {
                    "default": "rgb(63,16,87)",
                    "type": "color"
                  },
                  "color2": {
                    "default": "rgb(76,152,134)",
                    "type": "color"
                  },
                  "color3": {
                    "default": "rgb(240,218,24)",
                    "type": "color"
                  },
                  "volLength": {
                    "default": 20,
                    "type": "range",
                    "min": 1,
                    "max": 200,
                    "step": 1
                  },
                  "atrLength": {
                    "default": 20,
                    "type": "range",
                    "min": 1,
                    "max": 200,
                    "step": 1
                  },
                  "useHK": {
                    "default": true,
                    "type": "checkbox",
                    "description": "Use heikinashi as source"
                  },
                  "useLog": {
                    "default": true,
                    "type": "checkbox"
                  },
                  "strokeWidth": {
                    "default": 0,
                    "type": "number",
                    "description": "For debug purpose"
                  }
                },
                "series": [
                  "liquidation-heatmap",
                  "axuwemd7",
                  "kbkb7c6i",
                  "59nv0sif",
                  "41cvbv0v",
                  "ffdk4i70",
                  "dkcmx0ui",
                  "ugysap69",
                  "43o56l7i",
                  "56llqrs2",
                  "5l4gyiqy",
                  "lyb8y58u",
                  "fb634hm0",
                  "v343xaw6",
                  "aeuz5rts",
                  "ndi2vfz7",
                  "hgtfa3kv"
                ],
                "displayName": "Liquidation Heatmap"
              }
            },
            "indicatorOrder": [
              "_7wdaz6pi7ln05htf",
              "_sx7x9qvn20y0tx8g"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.52
                },
                "indicators": [
                  "Price"
                ],
                "priceFormat": {
                  "precision": 1,
                  "minMove": 0.1
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.94
                },
                "indicators": [
                  "Liquidations"
                ]
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "cvdperp": {
                "scaleMargins": {
                  "top": 0.67,
                  "bottom": 0.16
                },
                "indicators": [
                  "CVD (BTC PERP)"
                ]
              },
              "cvdspot": {
                "scaleMargins": {
                  "top": 0.48,
                  "bottom": 0.34
                },
                "indicators": [
                  "CVD (BTC SPOT)"
                ]
              },
              "aggr-spot-delta": {
                "scaleMargins": {
                  "top": 0.48,
                  "bottom": 0.34
                },
                "indicators": [
                  "Spot Delta"
                ]
              },
              "delta-stable-perp-aggr": {
                "scaleMargins": {
                  "top": 0.67,
                  "bottom": 0.16
                },
                "indicators": [
                  "Futures Delta"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "3600",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": true,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "textColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 4.87921492484474,
            "navigationState": {
              "tab": "script",
              "optionsQuery": "",
              "fontSizePx": 18
            },
            "forceNormalizePrice": false
          },
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "HUOBI:BTC-USD",
            "HUOBI:BTC-USDT",
            "HUOBI:btcusdc",
            "HUOBI:btcusdt",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "POLONIEX:BTC_USDC",
            "POLONIEX:BTC_USDD",
            "POLONIEX:BTC_USDT"
          ]
        },
        "chart copy 2": {
          "id": "chart copy 2",
          "name": "",
          "type": "chart",
          "zoom": 1.25,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "_7wdaz6pi7ln05htf": {
                "id": "_7wdaz6pi7ln05htf",
                "libraryId": "price",
                "name": "Price",
                "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
                "createdAt": 1702545199397,
                "updatedAt": 1714153707454,
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 1
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": true,
                  "upColor": "rgb(59,202,109)",
                  "downColor": "rgb(214,40,40)",
                  "borderUpColor": "rgb(59,202,109)",
                  "borderDownColor": "rgb(239,67,82)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgb(239,67,82)",
                  "useGaps": false,
                  "useHeikinAshi": false
                },
                "optionsDefinitions": {},
                "series": [
                  "price"
                ],
                "displayName": "Price"
              },
              "_sx7x9qvn20y0tx8g": {
                "id": "_sx7x9qvn20y0tx8g",
                "libraryId": "liquidation-heatmap",
                "name": "Liquidation Heatmap",
                "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=0,type=range,min=0,max=220,log=true)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.01,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (ratio < 0.001) {\n    continue\n  }\n  \n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
                "createdAt": 1703543399433,
                "updatedAt": 1714153726840,
                "options": {
                  "priceScaleId": "right"
                },
                "optionsDefinitions": {
                  "leverages": {
                    "default": "5|20|100",
                    "type": "text"
                  },
                  "threshold": {
                    "default": 0,
                    "type": "range",
                    "min": 0,
                    "max": 220,
                    "log": true
                  },
                  "fadeOut": {
                    "default": 0,
                    "type": "range",
                    "min": 0,
                    "max": 1,
                    "log": true,
                    "step": 0.001
                  },
                  "stepScale": {
                    "default": 0.5,
                    "type": "range",
                    "min": 0,
                    "max": 2,
                    "step": 0.01
                  },
                  "stepValue": {
                    "default": "",
                    "type": "text",
                    "placeholder": "empty = ATR"
                  },
                  "strength": {
                    "default": 0.25,
                    "type": "range",
                    "min": 0,
                    "max": 10,
                    "step": 0.01,
                    "log": true
                  },
                  "quote": {
                    "default": 0,
                    "type": "list",
                    "options": [
                      null,
                      "USD",
                      "USDT",
                      "TUSD",
                      "USDC"
                    ],
                    "rebuild": true
                  },
                  "exchange": {
                    "default": 0,
                    "type": "exchange",
                    "rebuild": true
                  },
                  "type": {
                    "default": "perp",
                    "type": "list",
                    "options": [
                      null,
                      "spot",
                      "perp"
                    ],
                    "rebuild": true
                  },
                  "src": {
                    "default": "high/low",
                    "type": "list",
                    "options": [
                      "open",
                      "high",
                      "low",
                      "close",
                      "hl2",
                      "ohl3",
                      "ohlc4",
                      "hlcc4",
                      "high/low",
                      "low/high"
                    ]
                  },
                  "color0": {
                    "default": "rgba(0,0,0,0)",
                    "type": "color"
                  },
                  "color1": {
                    "default": "rgb(63,16,87)",
                    "type": "color"
                  },
                  "color2": {
                    "default": "rgb(76,152,134)",
                    "type": "color"
                  },
                  "color3": {
                    "default": "rgb(240,218,24)",
                    "type": "color"
                  },
                  "volLength": {
                    "default": 20,
                    "type": "range",
                    "min": 1,
                    "max": 200,
                    "step": 1
                  },
                  "atrLength": {
                    "default": 20,
                    "type": "range",
                    "min": 1,
                    "max": 200,
                    "step": 1
                  },
                  "useHK": {
                    "default": true,
                    "type": "checkbox",
                    "description": "Use heikinashi as source"
                  },
                  "useLog": {
                    "default": true,
                    "type": "checkbox"
                  },
                  "strokeWidth": {
                    "default": 0,
                    "type": "number",
                    "description": "For debug purpose"
                  }
                },
                "series": [
                  "liquidation-heatmap",
                  "axuwemd7",
                  "kbkb7c6i",
                  "59nv0sif",
                  "41cvbv0v",
                  "ffdk4i70",
                  "dkcmx0ui",
                  "ugysap69",
                  "43o56l7i",
                  "56llqrs2",
                  "5l4gyiqy",
                  "lyb8y58u",
                  "fb634hm0",
                  "v343xaw6",
                  "aeuz5rts",
                  "ndi2vfz7",
                  "hgtfa3kv"
                ],
                "displayName": "Liquidation Heatmap"
              }
            },
            "indicatorOrder": [
              "_7wdaz6pi7ln05htf",
              "_sx7x9qvn20y0tx8g"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.52
                },
                "indicators": [
                  "Price"
                ],
                "priceFormat": {
                  "precision": 1,
                  "minMove": 0.1
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.94
                },
                "indicators": [
                  "Liquidations"
                ]
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "cvdperp": {
                "scaleMargins": {
                  "top": 0.67,
                  "bottom": 0.16
                },
                "indicators": [
                  "CVD (BTC PERP)"
                ]
              },
              "cvdspot": {
                "scaleMargins": {
                  "top": 0.48,
                  "bottom": 0.34
                },
                "indicators": [
                  "CVD (BTC SPOT)"
                ]
              },
              "aggr-spot-delta": {
                "scaleMargins": {
                  "top": 0.48,
                  "bottom": 0.34
                },
                "indicators": [
                  "Spot Delta"
                ]
              },
              "delta-stable-perp-aggr": {
                "scaleMargins": {
                  "top": 0.67,
                  "bottom": 0.16
                },
                "indicators": [
                  "Futures Delta"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "900",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": true,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "textColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 4.87921492484474,
            "navigationState": {
              "tab": "script",
              "optionsQuery": "",
              "fontSizePx": 18
            },
            "forceNormalizePrice": false
          },
          "markets": [
            "BINANCE_FUTURES:solusd_perp",
            "BINANCE_FUTURES:solusdt",
            "BINANCE:solfdusd",
            "BINANCE:solusdt",
            "BITFINEX:SOLF0:USTF0",
            "BITFINEX:SOLUSD",
            "BITFINEX:SOLUST",
            "BITGET:SOLUSDC",
            "BITGET:SOLUSDT",
            "BITGET:SOLUSDT_UMCBL",
            "BITMEX:SOLUSD",
            "BITMEX:SOLUSDT",
            "BYBIT:SOLUSDT",
            "COINBASE:SOL-USD",
            "COINBASE:SOL-USDT",
            "DERIBIT:SOL_USDC-PERPETUAL",
            "HUOBI:SOL-USDT",
            "KRAKEN:SOL/USD",
            "OKEX:SOL-USDT",
            "OKEX:SOL-USDT-SWAP"
          ]
        },
        "chart copy 5": {
          "id": "chart copy 5",
          "name": "",
          "type": "chart",
          "zoom": 1.25,
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "_7wdaz6pi7ln05htf": {
                "id": "_7wdaz6pi7ln05htf",
                "libraryId": "price",
                "name": "Price",
                "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
                "createdAt": 1702545199397,
                "updatedAt": 1714153707454,
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 2,
                    "minMove": 0.01
                  },
                  "priceLineVisible": true,
                  "lastValueVisible": true,
                  "borderVisible": true,
                  "upColor": "rgb(59,202,109)",
                  "downColor": "rgb(214,40,40)",
                  "borderUpColor": "rgb(59,202,109)",
                  "borderDownColor": "rgb(239,67,82)",
                  "wickUpColor": "rgb(223,211,144)",
                  "wickDownColor": "rgb(239,67,82)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.04,
                    "bottom": 0.52
                  }
                },
                "optionsDefinitions": {},
                "series": [
                  "price"
                ],
                "displayName": "Price",
                "unsavedChanges": true
              },
              "_sx7x9qvn20y0tx8g": {
                "id": "_sx7x9qvn20y0tx8g",
                "libraryId": "liquidation-heatmap",
                "name": "Liquidation Heatmap",
                "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=0,type=range,min=0,max=220,log=true)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.01,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (ratio < 0.001) {\n    continue\n  }\n  \n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
                "createdAt": 1703543399433,
                "updatedAt": 1714153726840,
                "options": {
                  "priceScaleId": "right",
                  "scaleMargins": {
                    "top": 0.04,
                    "bottom": 0.52
                  }
                },
                "optionsDefinitions": {
                  "leverages": {
                    "default": "5|20|100",
                    "type": "text"
                  },
                  "threshold": {
                    "default": 0,
                    "type": "range",
                    "min": 0,
                    "max": 220,
                    "log": true
                  },
                  "fadeOut": {
                    "default": 0,
                    "type": "range",
                    "min": 0,
                    "max": 1,
                    "log": true,
                    "step": 0.001
                  },
                  "stepScale": {
                    "default": 0.5,
                    "type": "range",
                    "min": 0,
                    "max": 2,
                    "step": 0.01
                  },
                  "stepValue": {
                    "default": "",
                    "type": "text",
                    "placeholder": "empty = ATR"
                  },
                  "strength": {
                    "default": 0.25,
                    "type": "range",
                    "min": 0,
                    "max": 10,
                    "step": 0.01,
                    "log": true
                  },
                  "quote": {
                    "default": 0,
                    "type": "list",
                    "options": [
                      null,
                      "USD",
                      "USDT",
                      "TUSD",
                      "USDC"
                    ],
                    "rebuild": true
                  },
                  "exchange": {
                    "default": 0,
                    "type": "exchange",
                    "rebuild": true
                  },
                  "type": {
                    "default": "perp",
                    "type": "list",
                    "options": [
                      null,
                      "spot",
                      "perp"
                    ],
                    "rebuild": true
                  },
                  "src": {
                    "default": "high/low",
                    "type": "list",
                    "options": [
                      "open",
                      "high",
                      "low",
                      "close",
                      "hl2",
                      "ohl3",
                      "ohlc4",
                      "hlcc4",
                      "high/low",
                      "low/high"
                    ]
                  },
                  "color0": {
                    "default": "rgba(0,0,0,0)",
                    "type": "color"
                  },
                  "color1": {
                    "default": "rgb(63,16,87)",
                    "type": "color"
                  },
                  "color2": {
                    "default": "rgb(76,152,134)",
                    "type": "color"
                  },
                  "color3": {
                    "default": "rgb(240,218,24)",
                    "type": "color"
                  },
                  "volLength": {
                    "default": 20,
                    "type": "range",
                    "min": 1,
                    "max": 200,
                    "step": 1
                  },
                  "atrLength": {
                    "default": 20,
                    "type": "range",
                    "min": 1,
                    "max": 200,
                    "step": 1
                  },
                  "useHK": {
                    "default": true,
                    "type": "checkbox",
                    "description": "Use heikinashi as source"
                  },
                  "useLog": {
                    "default": true,
                    "type": "checkbox"
                  },
                  "strokeWidth": {
                    "default": 0,
                    "type": "number",
                    "description": "For debug purpose"
                  }
                },
                "series": [
                  "liquidation-heatmap",
                  "srae9x6d",
                  "g66jnqc3",
                  "8yrh13o6",
                  "p175edve",
                  "wbm8vu1p",
                  "v7dxwbw4",
                  "xzhzzpi2",
                  "t0gh5ikh",
                  "242cx97y",
                  "8fft8k42",
                  "4u5bfp9p",
                  "lczik617",
                  "4tf7ttbl",
                  "69wtc7a9",
                  "netpq3qa",
                  "7g4i26k1"
                ],
                "displayName": "Liquidation Heatmap"
              }
            },
            "indicatorOrder": [
              "_7wdaz6pi7ln05htf",
              "_sx7x9qvn20y0tx8g"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.52
                },
                "indicators": [
                  "Price"
                ],
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "volume_liquidations": {
                "scaleMargins": {
                  "top": 0,
                  "bottom": 0.94
                },
                "indicators": [
                  "Liquidations"
                ]
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "cvdperp": {
                "scaleMargins": {
                  "top": 0.67,
                  "bottom": 0.16
                },
                "indicators": [
                  "CVD (BTC PERP)"
                ]
              },
              "cvdspot": {
                "scaleMargins": {
                  "top": 0.48,
                  "bottom": 0.34
                },
                "indicators": [
                  "CVD (BTC SPOT)"
                ]
              },
              "aggr-spot-delta": {
                "scaleMargins": {
                  "top": 0.48,
                  "bottom": 0.34
                },
                "indicators": [
                  "Spot Delta"
                ]
              },
              "delta-stable-perp-aggr": {
                "scaleMargins": {
                  "top": 0.67,
                  "bottom": 0.16
                },
                "indicators": [
                  "Futures Delta"
                ]
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "900",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": true,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "textColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 2.06521433607203,
            "navigationState": {
              "tab": "script",
              "optionsQuery": "",
              "fontSizePx": 18
            },
            "forceNormalizePrice": false
          },
          "markets": [
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:ethbusd",
            "BINANCE:ethfdusd",
            "BINANCE:ethusdc",
            "BINANCE:ethusdt",
            "BITFINEX:ETHF0:USTF0",
            "BITFINEX:ETHUSD",
            "BITFINEX:ETHUST",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDC",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BITMEX:ETH_USDT",
            "BITMEX:ETHUSD",
            "BITMEX:ETHUSDT",
            "BITSTAMP:ethusd",
            "BITSTAMP:ethusdt",
            "BYBIT:ETHUSD",
            "BYBIT:ETHUSDC-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "DERIBIT:ETH_USDC-PERPETUAL",
            "DERIBIT:ETH-PERPETUAL",
            "HUOBI:ETH-USD",
            "HUOBI:ETH-USDT",
            "HUOBI:ethusdc",
            "HUOBI:ethusdd",
            "HUOBI:ethusdt",
            "KRAKEN:ETH/USD",
            "KRAKEN:ETH/USDC",
            "KRAKEN:ETH/USDT",
            "KRAKEN:PI_ETHUSD",
            "KUCOIN:ETH-USDC",
            "KUCOIN:ETH-USDT",
            "KUCOIN:ETHUSDCM",
            "KUCOIN:ETHUSDM",
            "KUCOIN:ETHUSDTM",
            "MEXC:ETH_USD",
            "MEXC:ETH_USDT",
            "MEXC:ETHUSDT",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDC",
            "OKEX:ETH-USDC-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP",
            "POLONIEX:ETH_USDC",
            "POLONIEX:ETH_USDT"
          ]
        },
        "chart": {
          "id": "chart",
          "name": "",
          "type": "chart",
          "settings": {
            "indicatorsErrors": {},
            "indicators": {
              "price": {
                "enabled": true,
                "name": "Price",
                "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
                "options": {
                  "priceScaleId": "right",
                  "priceFormat": {
                    "auto": true,
                    "precision": 2,
                    "minMove": 0.01
                  },
                  "priceLineVisible": false,
                  "lastValueVisible": true,
                  "borderVisible": true,
                  "upColor": "rgba(41,98,255,0.33)",
                  "downColor": "rgba(255,152,0,0.72)",
                  "borderUpColor": "rgba(41,98,255,0.88)",
                  "borderDownColor": "rgba(255,152,0,0.88)",
                  "wickUpColor": "rgba(41,98,255,0.59)",
                  "wickDownColor": "rgb(255,152,0)",
                  "useGaps": false,
                  "useHeikinAshi": false,
                  "scaleMargins": {
                    "top": 0.04,
                    "bottom": 0.26
                  },
                  "priceLineColor": null,
                  "baseLineVisible": false
                },
                "id": "price",
                "createdAt": 1657340969806,
                "updatedAt": 1714156382555,
                "series": [
                  "price"
                ],
                "unsavedChanges": true,
                "displayName": "Price",
                "navigationState": {
                  "sections": [
                    "position",
                    "colors"
                  ],
                  "tab": 0,
                  "optionsQuery": "",
                  "fontSize": 1
                },
                "preview": {},
                "optionsDefinitions": {},
                "lastPreset": "main",
                "libraryId": "price"
              },
              "_64yf30cyjyuwgq88": {
                "id": "_64yf30cyjyuwgq88",
                "libraryId": "cvd-spot",
                "name": "CVD SPOT",
                "script": "buyVol = source(vbuy, type=spot)\nsellVol = source(vsell, type=spot)\nline(cum(buyVol - sellVol), title=SPOT)",
                "createdAt": 1623024000001,
                "updatedAt": 1714154311897,
                "options": {
                  "priceScaleId": "cvdspot",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgb(178,181,190)",
                  "scaleMargins": {
                    "top": 0.1,
                    "bottom": 0.2
                  },
                  "lastValueVisible": true
                },
                "optionsDefinitions": {},
                "series": [
                  "cvd-spot"
                ],
                "displayName": "CVD SPOT",
                "unsavedChanges": false
              },
              "_s27inspepw87p0zf": {
                "id": "_s27inspepw87p0zf",
                "libraryId": "cvd-perp",
                "name": "CVD PERP",
                "script": "buyVol = source(vbuy, type=perp)\nsellVol = source(vsell, type=perp)\nline(cum(buyVol - sellVol), title=PERP)",
                "createdAt": 1623024000001,
                "updatedAt": 1714154319881,
                "options": {
                  "priceScaleId": "cvdperp",
                  "priceFormat": {
                    "type": "volume"
                  },
                  "color": "rgb(103,58,183)",
                  "scaleMargins": {
                    "top": 0.1,
                    "bottom": 0.2
                  },
                  "lastValueVisible": true
                },
                "optionsDefinitions": {},
                "series": [
                  "cvd-perp"
                ],
                "displayName": "CVD PERP",
                "unsavedChanges": false
              }
            },
            "indicatorOrder": [
              "price",
              "_64yf30cyjyuwgq88",
              "_s27inspepw87p0zf"
            ],
            "priceScales": {
              "right": {
                "scaleMargins": {
                  "top": 0.04,
                  "bottom": 0.26
                },
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                }
              },
              "cvd": {
                "scaleMargins": {
                  "top": 0.11,
                  "bottom": 0.07
                },
                "indicators": [
                  "CVD"
                ]
              },
              "liquidations": {
                "scaleMargins": {
                  "top": 0.82,
                  "bottom": 0.1
                }
              },
              "volume": {
                "scaleMargins": {
                  "top": 0.84,
                  "bottom": 0
                }
              },
              "price": {
                "scaleMargins": {
                  "top": 0.11,
                  "bottom": 0.07
                },
                "indicators": [
                  "Price"
                ],
                "priceFormat": {
                  "precision": 2,
                  "minMove": 0.01
                }
              },
              "cvdspot": {
                "scaleMargins": {
                  "top": 0.1,
                  "bottom": 0.2
                }
              },
              "cvdperp": {
                "scaleMargins": {
                  "top": 0.1,
                  "bottom": 0.2
                }
              }
            },
            "layouting": false,
            "showIndicators": true,
            "timeframe": "86400",
            "refreshRate": 1000,
            "showAlerts": true,
            "showAlertsLabel": true,
            "showLegend": true,
            "fillGapsWithEmpty": true,
            "showHorizontalGridlines": false,
            "horizontalGridlinesColor": "rgba(255,255,255,.1)",
            "showVerticalGridlines": false,
            "verticalGridlinesColor": "rgba(255,255,255,.1)",
            "showWatermark": true,
            "watermarkColor": "rgba(255,255,255,.1)",
            "showBorder": true,
            "borderColor": null,
            "textColor": null,
            "showLeftScale": false,
            "showRightScale": true,
            "showTimeScale": true,
            "hiddenMarkets": {},
            "barSpacing": 5.086136446990897,
            "navigationState": {
              "tab": "options",
              "optionsQuery": "",
              "fontSizePx": 17
            }
          },
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "HUOBI:BTC-USD",
            "HUOBI:BTC-USDT",
            "HUOBI:btcusdc",
            "HUOBI:btcusdt",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "POLONIEX:BTC_USDC",
            "POLONIEX:BTC_USDD",
            "POLONIEX:BTC_USDT"
          ]
        },
        "alerts": {
          "id": "alerts",
          "name": "",
          "type": "alerts",
          "markets": []
        },
        "chart copy 7": {
          "id": "chart copy 7",
          "name": "",
          "type": "chart",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "HUOBI:BTC-USD",
            "HUOBI:BTC-USDT",
            "HUOBI:btcusdc",
            "HUOBI:btcusdt",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "POLONIEX:BTC_USDC",
            "POLONIEX:BTC_USDD",
            "POLONIEX:BTC_USDT"
          ]
        }
      },
      "syncedWithParentFrame": []
    },
    "settings": {
      "_id": "settings",
      "preferQuoteCurrencySize": true,
      "aggregationLength": 1,
      "calculateSlippage": null,
      "wsProxyUrl": null,
      "disableAnimations": false,
      "autoHideHeaders": true,
      "autoHideNames": true,
      "theme": "dark",
      "backgroundColor": "rgb(19,23,34)",
      "textColor": "",
      "buyColor": "rgb(100, 157, 102)",
      "sellColor": "rgb(239, 67, 82)",
      "timezoneOffset": 0,
      "useAudio": false,
      "audioVolume": 1,
      "audioFilters": {
        "PingPongDelay": true,
        "Compressor": false,
        "Delay": false,
        "HighPassFilter": true,
        "LowPassFilter": false
      },
      "sections": [
        "settings-trades",
        "indicator-right-script",
        "indicator-right-colors",
        "timeframe-hours",
        "search-exchanges",
        "search-type",
        "settings-workspaces",
        "timeframe-minutes",
        "indicator-left-script",
        "indicator-right-format",
        "indicator-right-scale",
        "settings-audio",
        "indicator-right-default",
        "indicator-left-colors",
        "settings-colors",
        "indicator-left-other",
        "alerts-BTCUSD",
        "alerts-ETHUSD",
        "watchlist-settings-columns",
        "watchlist-settings-extra",
        "alerts-SOLUSD"
      ],
      "searchTypes": {
        "recentSearches": true,
        "historical": true,
        "spots": true,
        "perpetuals": true,
        "futures": true,
        "normalize": true,
        "mergeUsdt": true
      },
      "searchQuotes": {},
      "previousSearchSelections": [
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "HUOBI:BTC-USD",
            "HUOBI:BTC-USDT",
            "HUOBI:btcusdc",
            "HUOBI:btcusdt",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "POLONIEX:BTC_USDC",
            "POLONIEX:BTC_USDD",
            "POLONIEX:BTC_USDT"
          ],
          "count": 49
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "HUOBI:BTC-USD",
            "HUOBI:BTC-USDT",
            "HUOBI:btcusdc",
            "HUOBI:btcusdt",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "POLONIEX:BTC_USDC",
            "POLONIEX:BTC_USDD",
            "POLONIEX:BTC_USDT"
          ],
          "count": 48
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "HUOBI:BTC-USD",
            "HUOBI:BTC-USDT",
            "HUOBI:btcusdc",
            "HUOBI:btcusdt",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP",
            "POLONIEX:BTC_USDC",
            "POLONIEX:BTC_USDD",
            "POLONIEX:BTC_USDT"
          ],
          "count": 50
        },
        {
          "label": "SOLUSD",
          "markets": [
            "BINANCE_FUTURES:solusd_perp",
            "BINANCE_FUTURES:solusdt",
            "BINANCE:solfdusd",
            "BINANCE:solusdt",
            "BITFINEX:SOLF0:USTF0",
            "BITFINEX:SOLUSD",
            "BITFINEX:SOLUST",
            "BITGET:SOLUSDC",
            "BITGET:SOLUSDT",
            "BITGET:SOLUSDT_UMCBL",
            "BITMEX:SOLUSD",
            "BITMEX:SOLUSDT",
            "BYBIT:SOLUSDT",
            "COINBASE:SOL-USD",
            "COINBASE:SOL-USDT",
            "DERIBIT:SOL_USDC-PERPETUAL",
            "HUOBI:SOL-USDT",
            "KRAKEN:SOL/USD",
            "OKEX:SOL-USDT",
            "OKEX:SOL-USDT-SWAP"
          ],
          "count": 20
        },
        {
          "label": "ETHUSD",
          "markets": [
            "BINANCE_FUTURES:ethusd_perp",
            "BINANCE_FUTURES:ethusdt",
            "BINANCE:ethbusd",
            "BINANCE:ethfdusd",
            "BINANCE:ethusdc",
            "BINANCE:ethusdt",
            "BITFINEX:ETHF0:USTF0",
            "BITFINEX:ETHUSD",
            "BITFINEX:ETHUST",
            "BITGET:ETHPERP_CMCBL",
            "BITGET:ETHUSD_DMCBL",
            "BITGET:ETHUSDC",
            "BITGET:ETHUSDT",
            "BITGET:ETHUSDT_UMCBL",
            "BITMEX:ETH_USDT",
            "BITMEX:ETHUSD",
            "BITMEX:ETHUSDT",
            "BITSTAMP:ethusd",
            "BITSTAMP:ethusdt",
            "BYBIT:ETHUSD",
            "BYBIT:ETHUSDC-SPOT",
            "BYBIT:ETHUSDT",
            "BYBIT:ETHUSDT-SPOT",
            "COINBASE:ETH-USD",
            "COINBASE:ETH-USDT",
            "DERIBIT:ETH_USDC-PERPETUAL",
            "DERIBIT:ETH-PERPETUAL",
            "HUOBI:ETH-USD",
            "HUOBI:ETH-USDT",
            "HUOBI:ethusdc",
            "HUOBI:ethusdd",
            "HUOBI:ethusdt",
            "KRAKEN:ETH/USD",
            "KRAKEN:ETH/USDC",
            "KRAKEN:ETH/USDT",
            "KRAKEN:PI_ETHUSD",
            "KUCOIN:ETH-USDC",
            "KUCOIN:ETH-USDT",
            "KUCOIN:ETHUSDCM",
            "KUCOIN:ETHUSDM",
            "KUCOIN:ETHUSDTM",
            "MEXC:ETH_USD",
            "MEXC:ETH_USDT",
            "MEXC:ETHUSDT",
            "OKEX:ETH-USD-SWAP",
            "OKEX:ETH-USDC",
            "OKEX:ETH-USDC-SWAP",
            "OKEX:ETH-USDT",
            "OKEX:ETH-USDT-SWAP",
            "POLONIEX:ETH_USDC",
            "POLONIEX:ETH_USDT"
          ],
          "count": 51
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcfdusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt"
          ],
          "count": 6
        },
        {
          "label": "BTCUSD",
          "markets": [
            "BINANCE_FUTURES:btcbusd",
            "BINANCE_FUTURES:btcusd_perp",
            "BINANCE_FUTURES:btcusdt",
            "BINANCE:btcbusd",
            "BINANCE:btcusdc",
            "BINANCE:btcusdt",
            "BITFINEX:BTCF0:USTF0",
            "BITFINEX:BTCUSD",
            "BITFINEX:BTCUST",
            "BITGET:BTCPERP_CMCBL",
            "BITGET:BTCUSD_DMCBL",
            "BITGET:BTCUSDC",
            "BITGET:BTCUSDT",
            "BITGET:BTCUSDT_UMCBL",
            "BITMEX:XBT_USDT",
            "BITMEX:XBTUSD",
            "BITMEX:XBTUSDT",
            "BITSTAMP:btcusd",
            "BITSTAMP:btcusdt",
            "BYBIT:BTCUSD",
            "BYBIT:BTCUSDC-SPOT",
            "BYBIT:BTCUSDT",
            "BYBIT:BTCUSDT-SPOT",
            "COINBASE:BTC-USD",
            "COINBASE:BTC-USDT",
            "DERIBIT:BTC_USDC-PERPETUAL",
            "DERIBIT:BTC-PERPETUAL",
            "KRAKEN:PI_XBTUSD",
            "KRAKEN:XBT/USD",
            "KRAKEN:XBT/USDC",
            "KRAKEN:XBT/USDT",
            "KUCOIN:BTC-USDC",
            "KUCOIN:BTC-USDT",
            "KUCOIN:XBTUSDM",
            "KUCOIN:XBTUSDTM",
            "MEXC:BTC_USD",
            "MEXC:BTC_USDT",
            "MEXC:BTCUSDT",
            "OKEX:BTC-USD-SWAP",
            "OKEX:BTC-USDC",
            "OKEX:BTC-USDC-SWAP",
            "OKEX:BTC-USDT",
            "OKEX:BTC-USDT-SWAP"
          ],
          "count": 43
        }
      ],
      "searchExchanges": {
        "AGGR": true,
        "BINANCE": true,
        "BINANCE_FUTURES": true,
        "BINANCE_US": true,
        "BITFINEX": true,
        "BITGET": true,
        "BITMART": true,
        "BITMEX": true,
        "BITSTAMP": true,
        "BYBIT": true,
        "COINBASE": true,
        "CRYPTOCOM": true,
        "DERIBIT": true,
        "DYDX": true,
        "GATEIO": true,
        "HITBTC": true,
        "HUOBI": true,
        "KRAKEN": true,
        "KUCOIN": true,
        "MEXC": true,
        "OKEX": true,
        "PHEMEX": true,
        "POLONIEX": true,
        "UNISWAP": true
      },
      "timeframes": [
        {
          "label": "1s",
          "value": "1"
        },
        {
          "label": "3s",
          "value": "3"
        },
        {
          "label": "5s",
          "value": "5"
        },
        {
          "label": "10s",
          "value": "10"
        },
        {
          "label": "15s",
          "value": "15"
        },
        {
          "label": "30s",
          "value": "30"
        },
        {
          "label": "1m",
          "value": "60"
        },
        {
          "label": "3m",
          "value": "180"
        },
        {
          "label": "5m",
          "value": "300"
        },
        {
          "label": "15m",
          "value": "900"
        },
        {
          "label": "21m",
          "value": "1260"
        },
        {
          "label": "30m",
          "value": "1800"
        },
        {
          "label": "1h",
          "value": "3600"
        },
        {
          "label": "2h",
          "value": "7200"
        },
        {
          "label": "4h",
          "value": "14400"
        },
        {
          "label": "6h",
          "value": "21600"
        },
        {
          "label": "8h",
          "value": "28800"
        },
        {
          "label": "12h",
          "value": "43200"
        },
        {
          "label": "1d",
          "value": "86400"
        },
        {
          "label": "21 ticks",
          "value": "21t"
        },
        {
          "label": "50 ticks",
          "value": "50t"
        },
        {
          "label": "89 ticks",
          "value": "89t"
        },
        {
          "label": "100 ticks",
          "value": "100t"
        },
        {
          "label": "200 ticks",
          "value": "200t"
        },
        {
          "label": "610 ticks",
          "value": "610t"
        },
        {
          "label": "1000 ticks",
          "value": "1000t"
        },
        {
          "label": "1597 ticks",
          "value": "1597t"
        }
      ],
      "favoriteTimeframes": {
        "900": "15m",
        "3600": "1h",
        "14400": "4h",
        "86400": "1d"
      },
      "normalizeWatermarks": true,
      "alerts": true,
      "alertsColor": "rgb(67,70,81)",
      "alertsLineStyle": 3,
      "alertsLineWidth": 1,
      "alertsClick": false,
      "alertSound": null,
      "showThresholdsAsTable": true,
      "timeframeGroups": [
        "seconds",
        "minutes",
        "hours"
      ],
      "indicatorDialogNavigation": "{\"optionsQuery\":\"\",\"editorOptions\":{},\"columnWidth\":240,\"tab\":\"options\"}"
    },
    "chart copy 3": {
      "indicatorsErrors": {},
      "indicators": {
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 2,
              "minMove": 0.01
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.26
            },
            "priceLineColor": null,
            "baseLineVisible": false
          },
          "id": "price",
          "createdAt": 1657340969806,
          "updatedAt": 1714156365520,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "displayName": "Price",
          "navigationState": {
            "sections": [
              "position",
              "colors"
            ],
            "tab": 0,
            "optionsQuery": "",
            "fontSize": 1
          },
          "preview": {},
          "optionsDefinitions": {},
          "lastPreset": "blue",
          "libraryId": "price"
        },
        "_bq966qsg2zzktm0c": {
          "id": "_bq966qsg2zzktm0c",
          "libraryId": "cvd-perp2",
          "name": "CVD PERP",
          "script": "buyVol = source(vbuy, type=perp)\nsellVol = source(vsell, type=perp)\nline(cum(buyVol - sellVol), title=PERP)",
          "createdAt": 1623024000001,
          "updatedAt": 1714153874440,
          "options": {
            "priceScaleId": "cvdperp",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(103,58,183)",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "cvd-perp2"
          ],
          "displayName": "CVD PERP",
          "unsavedChanges": true
        },
        "_739ew2wnhr6apqug": {
          "id": "_739ew2wnhr6apqug",
          "libraryId": "cvd-spot",
          "name": "CVD SPOT",
          "script": "buyVol = source(vbuy, type=spot)\nsellVol = source(vsell, type=spot)\nline(cum(buyVol - sellVol), title=SPOT)",
          "createdAt": 1623024000001,
          "updatedAt": 1714154288118,
          "options": {
            "priceScaleId": "cvdspot",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(178,181,190)",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "cvd-spot"
          ],
          "displayName": "CVD SPOT",
          "unsavedChanges": false
        }
      },
      "indicatorOrder": [
        "price",
        "_bq966qsg2zzktm0c",
        "_739ew2wnhr6apqug"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.26
          },
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "liquidations": {
          "scaleMargins": {
            "top": 0.82,
            "bottom": 0.1
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "price": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        }
      },
      "layouting": false,
      "showIndicators": false,
      "timeframe": "86400",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 7.219544499128928,
      "_id": "chart copy 3",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 17
      }
    },
    "chart copy 4": {
      "indicatorsErrors": {},
      "indicators": {
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 2,
              "minMove": 0.01
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.26
            },
            "priceLineColor": null,
            "baseLineVisible": false
          },
          "id": "price",
          "createdAt": 1657340969806,
          "updatedAt": 1714156382555,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "displayName": "Price",
          "navigationState": {
            "sections": [
              "position",
              "colors"
            ],
            "tab": 0,
            "optionsQuery": "",
            "fontSize": 1
          },
          "preview": {},
          "optionsDefinitions": {},
          "lastPreset": "blue",
          "libraryId": "price"
        },
        "_64yf30cyjyuwgq88": {
          "id": "_64yf30cyjyuwgq88",
          "libraryId": "cvd-spot",
          "name": "CVD SPOT",
          "script": "buyVol = source(vbuy, type=spot)\nsellVol = source(vsell, type=spot)\nline(cum(buyVol - sellVol), title=SPOT)",
          "createdAt": 1623024000001,
          "updatedAt": 1714154311897,
          "options": {
            "priceScaleId": "cvdspot",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(178,181,190)",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "cvd-spot"
          ],
          "displayName": "CVD SPOT",
          "unsavedChanges": false
        },
        "_s27inspepw87p0zf": {
          "id": "_s27inspepw87p0zf",
          "libraryId": "cvd-perp",
          "name": "CVD PERP",
          "script": "buyVol = source(vbuy, type=perp)\nsellVol = source(vsell, type=perp)\nline(cum(buyVol - sellVol), title=PERP)",
          "createdAt": 1623024000001,
          "updatedAt": 1714154319881,
          "options": {
            "priceScaleId": "cvdperp",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(103,58,183)",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "cvd-perp"
          ],
          "displayName": "CVD PERP",
          "unsavedChanges": false
        }
      },
      "indicatorOrder": [
        "price",
        "_64yf30cyjyuwgq88",
        "_s27inspepw87p0zf"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.26
          },
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "liquidations": {
          "scaleMargins": {
            "top": 0.82,
            "bottom": 0.1
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "price": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        }
      },
      "layouting": false,
      "showIndicators": false,
      "timeframe": "86400",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 6.7925181712903395,
      "_id": "chart copy 4",
      "navigationState": {
        "tab": "options",
        "optionsQuery": "",
        "fontSizePx": 17
      }
    },
    "chart copy 6": {
      "indicatorsErrors": {},
      "indicators": {
        "binance": {
          "script": "_vbuy = (BINANCE_FUTURES:btcusdt.vbuy+BINANCE_FUTURES:btcusd_perp.vbuy+BINANCE_FUTURES:btcbusd.vbuy+BINANCE:btcusdt.vbuy+BINANCE:btcbusd.vbuy+BINANCE:btcusdc.vbuy)\n\n_vsell = (BINANCE_FUTURES:btcusdt.vsell+BINANCE_FUTURES:btcusd_perp.vsell+BINANCE_FUTURES:btcbusd.vsell+BINANCE:btcusdt.vsell+BINANCE:btcbusd.vsell+BINANCE:btcusdc.vsell)\n\nvolume = _vbuy+_vsell\na = sma(Math.pow(volume,2),options.length)\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\nstdev = Math.sqrt(a - b)\nbasis = sma(volume, options.length)\ndev = 1 * stdev\ntreshold = basis + dev\n\ndelta = _vbuy - _vsell\nis_delta_positive = delta > 0\nis_vol_sig = volume > treshold\nohlc = avg_ohlc(bar)\nis_candle_up = ohlc.close > ohlc.open\n\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"Binance\")",
          "id": "binance",
          "name": "BINANCE ",
          "options": {
            "priceScaleId": "Bybit-delta",
            "upColor": "rgb(100,181,246)",
            "downColor": "rgb(239,83,80)",
            "visible": true,
            "upColorHighVol": "rgb(109,223,113)",
            "upColorLowVol": "rgb(31,106,34)",
            "downColorHighVol": "rgb(220,34,50)",
            "downColorLowVol": "rgb(108,17,24)",
            "length": 14,
            "scaleMargins": {
              "top": 0.27,
              "bottom": 0.61
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "divColorSigUp": "rgb(111,184,104)",
            "divColorSigDown": "rgb(184,110,104)",
            "divColorSmolDown": "rgb(181,147,144)",
            "divColorSmolUp": "rgb(148,189,156)"
          },
          "description": null,
          "unsavedChanges": true,
          "series": [
            "binance"
          ],
          "displayName": "BINANCE ",
          "createdAt": 1657342618497,
          "navigationState": {
            "sections": [
              "format",
              "defaultOptions",
              "scriptOptions",
              "colors"
            ],
            "tab": "#script",
            "optionsQuery": "",
            "fontSize": 1
          },
          "updatedAt": 1695944316648,
          "preview": {},
          "optionsDefinitions": {}
        },
        "bybit": {
          "script": "_vbuy = (BYBIT:BTCUSD.vbuy+BYBIT:BTCUSDT.vbuy+BYBIT:BTCUSDC-SPOT.vbuy+BYBIT:BTCUSDT-SPOT.vbuy)\n\n_vsell = (BYBIT:BTCUSD.vsell+BYBIT:BTCUSDT.vsell+BYBIT:BTCUSDC-SPOT.vsell+BYBIT:BTCUSDT-SPOT.vsell)\n\nvolume = _vbuy+_vsell\na = sma(Math.pow(volume,2),options.length)\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\nstdev = Math.sqrt(a - b)\nbasis = sma(volume, options.length)\ndev = 1 * stdev\ntreshold = basis + dev\n\ndelta = _vbuy - _vsell\nis_delta_positive = delta > 0\nis_vol_sig = volume > treshold\nohlc = avg_ohlc(bar)\nis_candle_up = ohlc.close > ohlc.open\n\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"BYBIT\")",
          "id": "bybit",
          "name": "BYBIT",
          "options": {
            "priceScaleId": "bybit",
            "upColor": "rgb(100,181,246)",
            "downColor": "rgb(239,83,80)",
            "visible": true,
            "upColorHighVol": "rgb(109,223,113)",
            "upColorLowVol": "rgb(31,106,34)",
            "downColorHighVol": "rgb(220,34,50)",
            "downColorLowVol": "rgb(108,17,24)",
            "length": 14,
            "scaleMargins": {
              "top": 0.41,
              "bottom": 0.47
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "divColorSigUp": "rgb(111,184,104)",
            "divColorSigDown": "rgb(184,110,104)",
            "divColorSmolDown": "rgb(181,147,144)",
            "divColorSmolUp": "rgb(148,189,156)"
          },
          "description": null,
          "unsavedChanges": true,
          "series": [
            "bybit"
          ],
          "displayName": "BYBIT",
          "navigationState": {
            "sections": [
              "format",
              "defaultOptions",
              "scriptOptions",
              "colors"
            ],
            "tab": "#script",
            "optionsQuery": "",
            "fontSize": 1
          },
          "preview": {},
          "optionsDefinitions": {}
        },
        "coinbase": {
          "script": "_vbuy = (COINBASE:BTC-USD.vbuy+COINBASE:BTC-USDT.vbuy)\n\n_vsell = (COINBASE:BTC-USD.vsell+COINBASE:BTC-USDT.vsell)\n\nvolume = _vbuy+_vsell\na = sma(Math.pow(volume,2),options.length)\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\nstdev = Math.sqrt(a - b)\nbasis = sma(volume, options.length)\ndev = 1 * stdev\ntreshold = basis + dev\n\ndelta = _vbuy - _vsell\nis_delta_positive = delta > 0\nis_vol_sig = volume > treshold\nohlc = avg_ohlc(bar)\nis_candle_up = ohlc.close > ohlc.open\n\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"COINBASE\")",
          "id": "coinbase",
          "name": "COINBASE",
          "options": {
            "priceScaleId": "coinbase",
            "upColor": "rgb(100,181,246)",
            "downColor": "rgb(239,83,80)",
            "visible": true,
            "upColorHighVol": "rgb(109,223,113)",
            "upColorLowVol": "rgb(31,106,34)",
            "downColorHighVol": "rgb(220,34,50)",
            "downColorLowVol": "rgb(108,17,24)",
            "length": 14,
            "scaleMargins": {
              "top": 0.55,
              "bottom": 0.34
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "divColorSigUp": "rgb(111,184,104)",
            "divColorSigDown": "rgb(184,110,104)",
            "divColorSmolDown": "rgb(181,147,144)",
            "divColorSmolUp": "rgb(148,189,156)"
          },
          "description": null,
          "unsavedChanges": true,
          "series": [
            "coinbase"
          ],
          "displayName": "COINBASE",
          "navigationState": {
            "sections": [
              "format",
              "defaultOptions",
              "scriptOptions",
              "colors"
            ],
            "tab": "#script",
            "optionsQuery": "",
            "fontSize": 1
          },
          "preview": {},
          "optionsDefinitions": {}
        },
        "bitmex": {
          "script": "_vbuy = (BITMEX:BTCUSD.vbuy+BITMEX:XBTUSD.vbuy+BITMEX:XBTUSDT.vbuy+BITMEX:XBT_USDT.vbuy)\n\n_vsell = (BITMEX:BTCUSD.vsell+BITMEX:XBTUSD.vsell+BITMEX:XBTUSDT.vsell+BITMEX:XBT_USDT.vsell)\n\nvolume = _vbuy+_vsell\na = sma(Math.pow(volume,2),options.length)\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\nstdev = Math.sqrt(a - b)\nbasis = sma(volume, options.length)\ndev = 1 * stdev\ntreshold = basis + dev\n\ndelta = _vbuy - _vsell\nis_delta_positive = delta > 0\nis_vol_sig = volume > treshold\nohlc = avg_ohlc(bar)\nis_candle_up = ohlc.close > ohlc.open\n\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"BITMEX\")",
          "id": "bitmex",
          "name": "BITMEX",
          "options": {
            "priceScaleId": "bitmex",
            "upColor": "rgb(100,181,246)",
            "downColor": "rgb(239,83,80)",
            "visible": true,
            "upColorHighVol": "rgb(109,223,113)",
            "upColorLowVol": "rgb(31,106,34)",
            "downColorHighVol": "rgb(220,34,50)",
            "downColorLowVol": "rgb(108,17,24)",
            "length": 14,
            "scaleMargins": {
              "top": 0.68,
              "bottom": 0.21
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "divColorSigUp": "rgb(111,184,104)",
            "divColorSigDown": "rgb(184,110,104)",
            "divColorSmolDown": "rgb(181,147,144)",
            "divColorSmolUp": "rgb(148,189,156)"
          },
          "description": null,
          "unsavedChanges": true,
          "series": [
            "bitmex"
          ],
          "displayName": "BITMEX",
          "navigationState": {
            "sections": [
              "format",
              "defaultOptions",
              "scriptOptions",
              "colors"
            ],
            "tab": "#script",
            "optionsQuery": "",
            "fontSize": 1
          },
          "preview": {},
          "optionsDefinitions": {}
        },
        "mexc-usdt-perp": {
          "script": "_vbuy = (MEXC:BTC_USDT.vbuy+MEXC:BTC_USD.vbuy)\n\n_vsell = (MEXC:BTC_USDT.vsell+MEXC:BTC_USD.vsell)\n\nvolume = _vbuy+_vsell\na = sma(Math.pow(volume,2),options.length)\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\nstdev = Math.sqrt(a - b)\nbasis = sma(volume, options.length)\ndev = 1 * stdev\ntreshold = basis + dev\n\ndelta = _vbuy - _vsell\nis_delta_positive = delta > 0\nis_vol_sig = volume > treshold\nohlc = avg_ohlc(bar)\nis_candle_up = ohlc.close > ohlc.open\n\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"MEXC Perp\")",
          "id": "mexc-usdt-perp",
          "name": "MEXC USDT PERP",
          "options": {
            "priceScaleId": "binance-btc-usd-delta-copy-4",
            "upColor": "rgb(100,181,246)",
            "downColor": "rgb(239,83,80)",
            "visible": true,
            "upColorHighVol": "rgb(109,223,113)",
            "upColorLowVol": "rgb(31,106,34)",
            "downColorHighVol": "rgb(220,34,50)",
            "downColorLowVol": "rgb(108,17,24)",
            "length": 14,
            "scaleMargins": {
              "top": 0.84,
              "bottom": 0.03
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "divColorSigUp": "rgb(111,184,104)",
            "divColorSigDown": "rgb(184,110,104)",
            "divColorSmolDown": "rgb(181,147,144)",
            "divColorSmolUp": "rgb(148,189,156)"
          },
          "description": null,
          "unsavedChanges": true,
          "series": [
            "mexc-usdt-perp"
          ],
          "displayName": "MEXC USDT PERP",
          "navigationState": {
            "sections": [
              "format",
              "defaultOptions",
              "scriptOptions",
              "colors"
            ],
            "tab": "#script",
            "optionsQuery": "",
            "fontSize": 1
          },
          "optionsDefinitions": {},
          "createdAt": 1696303558279,
          "updatedAt": 1696303944974
        },
        "_0em26yp358stc1rw": {
          "id": "_0em26yp358stc1rw",
          "libraryId": "spot-delta",
          "name": "Spot Delta",
          "script": "_vbuy = (BINANCE:btcusdt.vbuy+COINBASE:BTC-USD.vbuy+BITFINEX:BTCUSD.vbuy+BINANCE:btcbusd.vbuy+BITFINEX:BTCUST.vbuy+COINBASE:BTC-USDT.vbuy+BITSTAMP:btcusd.vbuy)\r\n_vsell = (BINANCE:btcusdt.vsell+COINBASE:BTC-USD.vsell+BITFINEX:BTCUSD.vsell+BINANCE:btcbusd.vsell+BITFINEX:BTCUST.vsell+COINBASE:BTC-USDT.vsell+BITSTAMP:btcusd.vsell)\r\n\r\nvolume = _vbuy+_vsell\r\na = sma(Math.pow(volume,2),options.length)\r\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\r\nstdev = Math.sqrt(a - b)\r\nbasis = sma(volume, options.length)\r\ndev = 1 * stdev\r\ntreshold = basis + dev\r\n\r\ndelta = _vbuy - _vsell\r\n\r\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"Spot Delta\")",
          "createdAt": 1714482083058,
          "updatedAt": 1714482546131,
          "options": {
            "priceScaleId": "_0em26yp358stc1rw",
            "length": 14,
            "scaleMargins": {
              "top": 0.14,
              "bottom": 0.73
            },
            "lastValueVisible": true,
            "visible": true,
            "upColorHighVol": "rgb(76,175,80)",
            "upColorLowVol": "rgb(27,94,32)",
            "downColorHighVol": "rgb(242,54,69)",
            "downColorLowVol": "rgb(128,25,34)",
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            }
          },
          "optionsDefinitions": {},
          "series": [
            "spot-delta"
          ],
          "displayName": "Spot Delta",
          "unsavedChanges": true
        },
        "_695in8juf4cp84jb": {
          "id": "_695in8juf4cp84jb",
          "libraryId": "futures-delta",
          "name": "Futures Delta",
          "script": "_vbuy = (BINANCE_FUTURES:btcusd_perp.vbuy+BINANCE_FUTURES:btcusdt.vbuy+BINANCE_FUTURES:btcbusd.vbuy+BITMEX:XBTUSD.vbuy+BYBIT:BTCUSD.vbuy+DERIBIT:BTC-PERPETUAL.vbuy+BITFINEX:BTCFO:USTFO.vbuy+BITMEX:XBTUSDT.vbuy+BYBIT:BTCUSDT.vbuy+KRAKEN:PI_XBTUSD.vbuy+OKEX:BTC-USD-SWAP.vbuy+OKEX:BTC-USDT-SWAP.vbuy)\r\n_vsell = (BINANCE_FUTURES:btcusd_perp.vsell+BINANCE_FUTURES:btcusdt.vsell+BINANCE_FUTURES:btcbusd.vsell+BITMEX:XBTUSD.vsell+BYBIT:BTCUSD.vsell+DERIBIT:BTC-PERPETUAL.vsell+BITFINEX:BTCFO:USTFO.vsell+BITMEX:XBTUSDT.vsell+BYBIT:BTCUSDT.vsell+KRAKEN:PI_XBTUSD.vsell+OKEX:BTC-USD-SWAP.vsell+OKEX:BTC-USDT-SWAP.vsell)\r\n\r\nvolume = _vbuy+_vsell\r\na = sma(Math.pow(volume,2),options.length)\r\nb = Math.pow(sum(volume,options.length),2)/Math.pow(options.length,2)\r\nstdev = Math.sqrt(a - b)\r\nbasis = sma(volume, options.length)\r\ndev = 1 * stdev\r\ntreshold = basis + dev\r\n\r\ndelta = _vbuy - _vsell\r\n\r\nplothistogram({ time: time, value: (delta), color: delta > 0 ? ( volume > treshold ? options.upColorHighVol : options.upColorLowVol) : ( volume > treshold ? options.downColorHighVol : options.downColorLowVol)}, title=\"Futures Delta\")",
          "createdAt": 1714482735631,
          "updatedAt": 1714482739616,
          "options": {
            "priceScaleId": "_695in8juf4cp84jb",
            "length": 14,
            "scaleMargins": {
              "top": 0,
              "bottom": 0.85
            },
            "priceFormat": {
              "type": "volume",
              "precision": 2,
              "minMove": 0.01,
              "auto": false
            },
            "upColorHighVol": "rgb(76,175,80)",
            "upColorLowVol": "rgb(27,94,32)",
            "downColorHighVol": "rgb(242,54,69)",
            "downColorLowVol": "rgb(128,25,34)",
            "priceLineVisible": false,
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "_695in8juf4cp84jb"
          ],
          "displayName": "Futures Delta",
          "unsavedChanges": false
        }
      },
      "indicatorOrder": [
        "binance",
        "bybit",
        "coinbase",
        "bitmex",
        "mexc-usdt-perp",
        "_0em26yp358stc1rw",
        "_695in8juf4cp84jb"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.74
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          },
          "indicators": [
            "Price"
          ]
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "liquidations": {
          "scaleMargins": {
            "top": 0.82,
            "bottom": 0.1
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "price": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.74
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "basis": {
          "scaleMargins": {
            "top": 0.86,
            "bottom": 0.04
          },
          "indicators": [
            "Basis"
          ]
        },
        "Coinbase-delta-spot": {
          "scaleMargins": {
            "top": 0.8,
            "bottom": 0.07
          }
        },
        "Bybit-delta": {
          "scaleMargins": {
            "top": 0.27,
            "bottom": 0.61
          },
          "indicators": [
            "BINANCE "
          ]
        },
        "bybit": {
          "scaleMargins": {
            "top": 0.41,
            "bottom": 0.47
          },
          "indicators": [
            "BYBIT"
          ]
        },
        "coinbase": {
          "scaleMargins": {
            "top": 0.55,
            "bottom": 0.34
          },
          "indicators": [
            "COINBASE"
          ]
        },
        "bitmex": {
          "scaleMargins": {
            "top": 0.68,
            "bottom": 0.21
          },
          "indicators": [
            "BITMEX"
          ]
        },
        "binance-btc-usd-delta-copy-4": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0.05
          },
          "indicators": [
            "MEXC USDT PERP"
          ]
        },
        "_nb25chuecjqr36ik": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        },
        "_0em26yp358stc1rw": {
          "scaleMargins": {
            "top": 0.14,
            "bottom": 0.73
          },
          "indicators": [
            "Spot Delta"
          ],
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": false
          }
        },
        "_695in8juf4cp84jb": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.85
          },
          "priceFormat": {
            "type": "volume",
            "precision": 2,
            "minMove": 0.01,
            "auto": false
          },
          "indicators": [
            "Futures Delta"
          ]
        }
      },
      "layouting": false,
      "showIndicators": false,
      "timeframe": "900",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {
        "BINANCE_FUTURES:btcusd_perp": false,
        "BITMEX:XBTUSD": false,
        "BYBIT:BTCUSD": false,
        "DERIBIT:BTC-PERPETUAL": false,
        "BINANCE_FUTURES:btcusdt": false,
        "BINANCE_FUTURES:btcbusd": false,
        "BITFINEX:BTCF0:USTF0": false,
        "BITMEX:XBTUSDT": false,
        "BYBIT:BTCUSDT": false,
        "KRAKEN:PI_XBTUSD": false,
        "OKEX:BTC-USD-SWAP": false,
        "OKEX:BTC-USDT-SWAP": false,
        "BITGET:BTCPERP_CMCBL": false,
        "BITGET:BTCUSD_DMCBL": false,
        "BITGET:BTCUSDT_UMCBL": false,
        "BITMEX:XBT_USDT": false,
        "DERIBIT:BTC_USDC-PERPETUAL": false,
        "KUCOIN:XBTUSDM": false,
        "KUCOIN:XBTUSDTM": false,
        "MEXC:BTC_USD": false,
        "MEXC:BTC_USDT": false,
        "OKEX:BTC-USDC-SWAP": false,
        "BITFINEX:BTCUSD": false,
        "COINBASE:BTC-USD": false,
        "BINANCE:btcusdt": false,
        "BINANCE:btcbusd": false,
        "BITFINEX:BTCUST": false,
        "COINBASE:BTC-USDT": false,
        "BITSTAMP:btcusd": false,
        "BINANCE:btcusdc": false,
        "BITGET:BTCUSDC": false,
        "BITGET:BTCUSDT": false,
        "BITSTAMP:btcusdt": false,
        "BYBIT:BTCUSDC-SPOT": false,
        "BYBIT:BTCUSDT-SPOT": false,
        "KRAKEN:XBT/USD": false,
        "KRAKEN:XBT/USDC": false,
        "KRAKEN:XBT/USDT": false,
        "KUCOIN:BTC-USDC": false,
        "KUCOIN:BTC-USDT": false,
        "MEXC:BTCUSDT": false,
        "OKEX:BTC-USDC": false,
        "OKEX:BTC-USDT": false
      },
      "barSpacing": 6.497593991292827,
      "_id": "chart copy 6",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 16
      }
    },
    "chart copy 1": {
      "indicatorsErrors": {},
      "indicators": {
        "_7wdaz6pi7ln05htf": {
          "id": "_7wdaz6pi7ln05htf",
          "libraryId": "price",
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "createdAt": 1702545199397,
          "updatedAt": 1714156345926,
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.52
            },
            "priceLineColor": null,
            "baseLineVisible": false
          },
          "optionsDefinitions": {},
          "series": [
            "price"
          ],
          "displayName": "Price",
          "unsavedChanges": true
        },
        "_sx7x9qvn20y0tx8g": {
          "id": "_sx7x9qvn20y0tx8g",
          "libraryId": "liquidation-heatmap",
          "name": "Liquidation Heatmap",
          "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=0,type=range,min=0,max=220,log=true)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.01,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (ratio < 0.001) {\n    continue\n  }\n  \n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
          "createdAt": 1703543399433,
          "updatedAt": 1714153726840,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.52
            },
            "leverages": "5|20|100",
            "threshold": 0,
            "fadeOut": 0,
            "stepScale": 0.5,
            "stepValue": "",
            "strength": 0.25,
            "quote": 0,
            "exchange": 0,
            "type": "perp",
            "src": "high/low",
            "volLength": 20,
            "atrLength": 20,
            "useHK": true,
            "useLog": true,
            "strokeWidth": 0,
            "color3": "rgb(251,192,45)"
          },
          "optionsDefinitions": {
            "leverages": {
              "default": "5|20|100",
              "type": "text"
            },
            "threshold": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 220,
              "log": true
            },
            "fadeOut": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 1,
              "log": true,
              "step": 0.001
            },
            "stepScale": {
              "default": 0.5,
              "type": "range",
              "min": 0,
              "max": 2,
              "step": 0.01
            },
            "stepValue": {
              "default": "",
              "type": "text",
              "placeholder": "empty = ATR"
            },
            "strength": {
              "default": 0.25,
              "type": "range",
              "min": 0,
              "max": 10,
              "step": 0.01,
              "log": true
            },
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            },
            "src": {
              "default": "high/low",
              "type": "list",
              "options": [
                "open",
                "high",
                "low",
                "close",
                "hl2",
                "ohl3",
                "ohlc4",
                "hlcc4",
                "high/low",
                "low/high"
              ]
            },
            "color0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "color2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "color3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "volLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "atrLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "useHK": {
              "default": true,
              "type": "checkbox",
              "description": "Use heikinashi as source"
            },
            "useLog": {
              "default": true,
              "type": "checkbox"
            },
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            }
          },
          "series": [
            "liquidation-heatmap",
            "ycdp35hh",
            "hn0dk4u7",
            "8xk8wjb2",
            "7g5vzmua",
            "cwyb8gfm",
            "buxe3850",
            "qm4cjv07",
            "hk2bb5r0",
            "o0aneuv4",
            "867mcspd",
            "r9xycwkh",
            "08huuqfb",
            "nz30obgy",
            "0q049dba",
            "j908az20",
            "amly8va4"
          ],
          "displayName": "Liquidation Heatmap",
          "unsavedChanges": true
        }
      },
      "indicatorOrder": [
        "_sx7x9qvn20y0tx8g",
        "_7wdaz6pi7ln05htf"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.52
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.94
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0.16
          },
          "indicators": [
            "CVD (BTC PERP)"
          ]
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.48,
            "bottom": 0.34
          },
          "indicators": [
            "CVD (BTC SPOT)"
          ]
        },
        "aggr-spot-delta": {
          "scaleMargins": {
            "top": 0.48,
            "bottom": 0.34
          },
          "indicators": [
            "Spot Delta"
          ]
        },
        "delta-stable-perp-aggr": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0.16
          },
          "indicators": [
            "Futures Delta"
          ]
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "14400",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 5.916232121667704,
      "_id": "chart copy 1",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 18
      },
      "forceNormalizePrice": false
    },
    "chart copy 2": {
      "indicatorsErrors": {},
      "indicators": {
        "_7wdaz6pi7ln05htf": {
          "id": "_7wdaz6pi7ln05htf",
          "libraryId": "price",
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "createdAt": 1702545199397,
          "updatedAt": 1714153707454,
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 2,
              "minMove": 0.01
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.22,
              "bottom": 0.34
            },
            "priceLineColor": null,
            "baseLineVisible": false
          },
          "optionsDefinitions": {},
          "series": [
            "price"
          ],
          "displayName": "Price",
          "unsavedChanges": true,
          "lastPreset": "blue"
        },
        "_sx7x9qvn20y0tx8g": {
          "id": "_sx7x9qvn20y0tx8g",
          "libraryId": "liquidation-heatmap",
          "name": "Liquidation Heatmap",
          "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=0,type=range,min=0,max=220,log=true)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.01,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (ratio < 0.001) {\n    continue\n  }\n  \n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
          "createdAt": 1703543399433,
          "updatedAt": 1714153726840,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.22,
              "bottom": 0.34
            },
            "leverages": "5|20|100",
            "threshold": 0,
            "fadeOut": 0,
            "stepScale": 0.5,
            "stepValue": "",
            "strength": 0.25,
            "quote": 0,
            "exchange": 0,
            "type": "perp",
            "src": "high/low",
            "volLength": 20,
            "atrLength": 20,
            "useHK": true,
            "useLog": true,
            "strokeWidth": 0
          },
          "optionsDefinitions": {
            "leverages": {
              "default": "5|20|100",
              "type": "text"
            },
            "threshold": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 220,
              "log": true
            },
            "fadeOut": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 1,
              "log": true,
              "step": 0.001
            },
            "stepScale": {
              "default": 0.5,
              "type": "range",
              "min": 0,
              "max": 2,
              "step": 0.01
            },
            "stepValue": {
              "default": "",
              "type": "text",
              "placeholder": "empty = ATR"
            },
            "strength": {
              "default": 0.25,
              "type": "range",
              "min": 0,
              "max": 10,
              "step": 0.01,
              "log": true
            },
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            },
            "src": {
              "default": "high/low",
              "type": "list",
              "options": [
                "open",
                "high",
                "low",
                "close",
                "hl2",
                "ohl3",
                "ohlc4",
                "hlcc4",
                "high/low",
                "low/high"
              ]
            },
            "color0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "color2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "color3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "volLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "atrLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "useHK": {
              "default": true,
              "type": "checkbox",
              "description": "Use heikinashi as source"
            },
            "useLog": {
              "default": true,
              "type": "checkbox"
            },
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            }
          },
          "series": [
            "liquidation-heatmap",
            "ujayxit6",
            "6v8akklv",
            "3j2m33l2",
            "h9s6n7js",
            "6ij1zxjr",
            "2bt8bf4p",
            "esmmk482",
            "rjzw9k3f",
            "0wxprjpc",
            "3t76w6m8",
            "5d7twrzc",
            "3ddxeudb",
            "mnets3pi",
            "oq2kbo2n",
            "ac325ufo",
            "5tzqolhn"
          ],
          "displayName": "Liquidation Heatmap",
          "unsavedChanges": true
        }
      },
      "indicatorOrder": [
        "_sx7x9qvn20y0tx8g",
        "_7wdaz6pi7ln05htf"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.22,
            "bottom": 0.34
          },
          "indicators": [
            "Price",
            "Liquidation Heatmap"
          ],
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.94
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0.16
          },
          "indicators": [
            "CVD (BTC PERP)"
          ]
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.48,
            "bottom": 0.34
          },
          "indicators": [
            "CVD (BTC SPOT)"
          ]
        },
        "aggr-spot-delta": {
          "scaleMargins": {
            "top": 0.48,
            "bottom": 0.34
          },
          "indicators": [
            "Spot Delta"
          ]
        },
        "delta-stable-perp-aggr": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0.16
          },
          "indicators": [
            "Futures Delta"
          ]
        }
      },
      "layouting": false,
      "showIndicators": false,
      "timeframe": "14400",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {
        "BINANCE:solfdusd": false,
        "BINANCE:solusdt": false,
        "BITFINEX:SOLUSD": false,
        "BITFINEX:SOLUST": false,
        "BITGET:SOLUSDC": false,
        "BITGET:SOLUSDT": false,
        "COINBASE:SOL-USD": false,
        "COINBASE:SOL-USDT": false,
        "KRAKEN:SOL/USD": false,
        "OKEX:SOL-USDT": false
      },
      "barSpacing": 9.24540300483406,
      "_id": "chart copy 2",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 18
      },
      "forceNormalizePrice": false
    },
    "chart copy 5": {
      "indicatorsErrors": {},
      "indicators": {
        "_7wdaz6pi7ln05htf": {
          "id": "_7wdaz6pi7ln05htf",
          "libraryId": "price",
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "createdAt": 1702545199397,
          "updatedAt": 1714153707454,
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 2,
              "minMove": 0.01
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.52
            },
            "priceLineColor": null,
            "baseLineVisible": false
          },
          "optionsDefinitions": {},
          "series": [
            "price"
          ],
          "displayName": "Price",
          "unsavedChanges": true,
          "lastPreset": "blue"
        },
        "_sx7x9qvn20y0tx8g": {
          "id": "_sx7x9qvn20y0tx8g",
          "libraryId": "liquidation-heatmap",
          "name": "Liquidation Heatmap",
          "script": "leverages = option(default=5|20|100,type=text)\nthreshold = option(default=0,type=range,min=0,max=220,log=true)\nfadeOut = option(default=0,type=range,min=0,max=1,log=true,step=0.001)\nstepScale = option(default=0.5,type=range,min=0,max=2,step=0.01)\nstepValue = option(default=\"\",type=text,placeholder=\"empty = ATR\")\nstrength = option(default=0.25,type=range,min=0,max=10,step=0.01,log=true)\nquote = option(default=null,type=list,options=[null, \"USD\", \"USDT\", \"TUSD\", \"USDC\"],rebuild=true)\nexchange = option(default=null,type=exchange,rebuild=true)\ntype = option(default=perp,type=list,options=[null, \"spot\", \"perp\"],rebuild=true)\nsrc = option(default=\"high/low\",type=list,options=[\"open\", \"high\", \"low\", \"close\",\"hl2\",\"ohl3\",\"ohlc4\",\"hlcc4\",\"high/low\",\"low/high\"])\ncolor0 = option(default=rgba(0,0,0,0),type=color)\ncolor1 = option(default=rgb(63,16,87),type=color)\ncolor2 = option(default=rgb(76,152,134),type=color)\ncolor3 = option(default=rgb(240,218,24),type=color)\nvolLength = option(default=20,type=range,min=1,max=200, step=1)\natrLength = option(default=20,type=range,min=1,max=200, step=1)\nuseHK = option(default=true,type=checkbox,description=\"Use heikinashi as source\")\nuseLog = option(default=true,type=checkbox)\nstrokeWidth = option(default=0,type=number,description=\"For debug purpose\")\n\nif (!liquidityAtPrices) {\n  // init\n\n  lastIndex = null\n  freeSlots = []\n  usedSlots = []\n  boundaries = {}\n  liquidityAtPrices = {}\n  resistances = []\n  supports = []\n  pendingRedraws = []\n  var shortLeverage = options.leverages.toString().split(/[|,]/).map(a => +a)\n  var longLeverage = shortLeverage.map(a => -a)\n  resolvedLeverages = shortLeverage.concat(longLeverage)\n  steps = null\n\n  for (var i = 0; i < series.length; i++) {\n    if (series[i].seriesType() !== 'BrokenArea') {\n      continue\n    }\n\n    // register each available series as a slot \n    freeSlots.push({\n    index: i,\n    redrawAt: 0\n    })\n\n    // bind boundaries reference\n    // boundaries: { [cellId: string]: *bar index* }\n    series[i].setExtensionsBoundaries(boundaries)\n  }\n}\n\n\n// process only on new candle\nif (bar.length === lastIndex) {\n  return\n}\n\nvar customSrc = source(quote=quote,type=type,exchange=exchange)\nvar price = useHK ? avg_heikinashi(customSrc) : avg_ohlc_with_gaps(customSrc)\n\npriceRef = price\n\n// grid size\nif (stepValue) {\n  // absolute\n  steps = stepValue\n} else {\n  // calculated with atr\n  var hl = price.high - price.low\n  var hc = Math.abs(price.high - priceRef[1].close)\n  var lc = Math.abs(price.low - priceRef[1].close)\n  var atr = sma(Math.max(hl, hc, lc), atrLength)\n\n  if (bar.length < atrLength) {\n    return\n  }\n\n  if (!steps) {\n    steps = atr * stepScale\n  }\n}\n\nbuyVolume = source(vbuy, quote=quote,type=type,exchange=exchange)\nsellVolume = source(vsell, quote=quote,type=type,exchange=exchange)\nvol = buyVolume + sellVolume\n\n// since we only run this indi once per bar (for performance)\n// only analyze volume data of the previous bar (vol[1], buyVolume[1], sellVolume[1])\nconst avgBuyVolume = sma(buyVolume[1] || 0, volLength) || 0.0001;\nconst avgSellVolume = sma(sellVolume[1] || 0, volLength) || 0.0001;\n\nvar buyRatio = (buyVolume[1] || 0) / avgBuyVolume;\nvar sellRatio = (sellVolume[1] || 0) / avgSellVolume;\nif (useLog) {\n  buyRatio = Math.log(buyRatio + 1)\n  sellRatio = Math.log(sellRatio + 1)\n}\n\n// custom src\nvar resolvedSrc  = priceRef[1][options.src]\nif (resolvedSrc === undefined) {\n  if (options.src === 'hl2') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low) / 2\n  } else if (options.src === 'ohl3') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low) / 3\n  } else if (options.src === 'ohlc4') {\n    resolvedSrc = (priceRef[1].open + priceRef[1].high + priceRef[1].low + priceRef[1].close) / 4\n  } else if (options.src === 'hlcc4') {\n    resolvedSrc = (priceRef[1].high + priceRef[1].low + priceRef[1].close + priceRef[1].close) / 4\n  }\n}\n\nfor (let i = 0; i < resolvedLeverages.length; i++) {\n  var lev = (resolvedLeverages)[i]\n\n  if (options.src === 'high/low') {\n    resolvedSrc = lev > 0 ? priceRef[1].high : priceRef[1].low\n  } else if (options.src === 'low/high') {\n    resolvedSrc = lev > 0 ? priceRef[1].low : priceRef[1].high\n  }\n\n  // liquidation price (from resolvedSrc + % to leverages[i]) \n  var lp = (resolvedSrc + resolvedSrc * (100 / lev / 100))\n  \n  // rounded lp median (the cell id)\n  var slp = Math.ceil(lp / steps) * steps\n  \n  if (!liquidityAtPrices[slp]) {\n    // register cell\n    var top = slp + steps / 2\n    var bottom = slp - steps / 2\n    liquidityAtPrices[slp] = {\n      strength: 0,\n      count: 0,\n      top: top,\n      bottom: bottom\n    }\n    \n    if (lev > 0) {\n        resistances.push(slp)\n        resistances.sort((a, b) => a - b)\n    } else {\n        supports.push(slp)\n        supports.sort((a, b) => b - a)\n    }\n  }\n  \n  // update cell\n  liquidityAtPrices[slp].count++\n  liquidityAtPrices[slp].strength += lev > 0 ? sellRatio : buyRatio\n  \n  var ratio = Math.min(1, liquidityAtPrices[slp].strength * liquidityAtPrices[slp].count * (options.strength / 100))\n\n  if (ratio < 0.001) {\n    continue\n  }\n  \n  liquidityAtPrices[slp].color = interpolate(ratio, color0, color1, color2, color3)\n\n  if (liquidityAtPrices[slp].strength > options.threshold) {\n    if (pendingRedraws.indexOf(slp) === -1) {\n      pendingRedraws.push(slp)\n    }\n  }\n}\n\nif (pendingRedraws.length) {\n\n  // round of used slot(s)\n  var slotsToRelease = []\n  for (var i = 0; i < pendingRedraws.length; i++) {\n    var cell = liquidityAtPrices[pendingRedraws[i]]\n    var slot = freeSlots.find(slot => slot.redrawAt < bar.length)\n\n    if (slot) {\n      var usedIndex = freeSlots.splice(freeSlots.indexOf(slot), 1)[0].index\n      usedSlots.push(usedIndex)\n\n      if (cell.id) {\n        boundaries[cell.id] = bar.length\n      }\n      \n      cell.id = Math.random().toString()\n      renderer.indicators[indicatorId].series[usedIndex] ={\n        id: cell.id,\n        time: time,\n        lowerValue: cell.top,\n        higherValue: cell.bottom,\n        extendRight: true,\n        color: cell.color\n      }\n\n      pendingRedraws.splice(i--, 1)\n      slotsToRelease.push(usedIndex)\n    }\n  }\n  for (let i = 0; i < slotsToRelease.length; i++) {\n    var plotIndexToFree = usedSlots.splice(usedSlots.indexOf(slotsToRelease[i]), 1)[0]\n    \n    freeSlots.push({\n      index: plotIndexToFree,\n      redrawAt: bar.length + 1\n    })\n  }\n}\n\nfor (let i = 0; i < supports.length; i++) {\n  if (\n   price.low <= supports[i] || liquidityAtPrices[supports[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[supports[i]].id] = bar.length\n    delete liquidityAtPrices[supports[i]]\n    supports.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[supports[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\nfor (let i = 0; i < resistances.length; i++) {\n  if (\n   price.high >= resistances[i] || liquidityAtPrices[resistances[i]].count <= 0\n  ) {\n    boundaries[liquidityAtPrices[resistances[i]].id] = bar.length\n    delete liquidityAtPrices[resistances[i]]\n    resistances.splice(i--, 1)\n  } else {\n    if (fadeOut) {\n      liquidityAtPrices[resistances[i]].count -= fadeOut\n    } else {\n      break;\n    }\n  }\n}\n\n// set reference to bar index : avoid process next tick\nlastIndex = bar.length\n\n// define available series\nif (renderer.indicators[indicatorId].series[0]) {\n  brokenarea(renderer.indicators[indicatorId].series[0] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[1]) {\n  brokenarea(renderer.indicators[indicatorId].series[1] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[2]) {\n  brokenarea(renderer.indicators[indicatorId].series[2] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[3]) {\n  brokenarea(renderer.indicators[indicatorId].series[3] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[4]) {\n  brokenarea(renderer.indicators[indicatorId].series[4] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[5]) {\n  brokenarea(renderer.indicators[indicatorId].series[5] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[6]) {\n  brokenarea(renderer.indicators[indicatorId].series[6] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[7]) {\n  brokenarea(renderer.indicators[indicatorId].series[7] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[8]) {\n  brokenarea(renderer.indicators[indicatorId].series[8] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[9]) {\n  brokenarea(renderer.indicators[indicatorId].series[9] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[10]) {\n  brokenarea(renderer.indicators[indicatorId].series[10] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[11]) {\n  brokenarea(renderer.indicators[indicatorId].series[11] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[12]) {\n  brokenarea(renderer.indicators[indicatorId].series[12] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[13]) {\n  brokenarea(renderer.indicators[indicatorId].series[13] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[14]) {\n  brokenarea(renderer.indicators[indicatorId].series[14] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[15]) {\n  brokenarea(renderer.indicators[indicatorId].series[15] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}\nif (renderer.indicators[indicatorId].series[16]) {\n  brokenarea(renderer.indicators[indicatorId].series[16] || { time: time }, strokeColor=options.strokeColor, strokeWidth=options.strokeWidth)\n}",
          "createdAt": 1703543399433,
          "updatedAt": 1714153726840,
          "options": {
            "priceScaleId": "right",
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.52
            },
            "leverages": "5|20|100",
            "threshold": 0,
            "fadeOut": 0,
            "stepScale": 0.5,
            "stepValue": "",
            "strength": 0.25,
            "quote": 0,
            "exchange": 0,
            "type": "perp",
            "src": "high/low",
            "volLength": 20,
            "atrLength": 20,
            "useHK": true,
            "useLog": true,
            "strokeWidth": 0,
            "color3": "rgb(240,218,24)"
          },
          "optionsDefinitions": {
            "leverages": {
              "default": "5|20|100",
              "type": "text"
            },
            "threshold": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 220,
              "log": true
            },
            "fadeOut": {
              "default": 0,
              "type": "range",
              "min": 0,
              "max": 1,
              "log": true,
              "step": 0.001
            },
            "stepScale": {
              "default": 0.5,
              "type": "range",
              "min": 0,
              "max": 2,
              "step": 0.01
            },
            "stepValue": {
              "default": "",
              "type": "text",
              "placeholder": "empty = ATR"
            },
            "strength": {
              "default": 0.25,
              "type": "range",
              "min": 0,
              "max": 10,
              "step": 0.01,
              "log": true
            },
            "quote": {
              "default": 0,
              "type": "list",
              "options": [
                null,
                "USD",
                "USDT",
                "TUSD",
                "USDC"
              ],
              "rebuild": true
            },
            "exchange": {
              "default": 0,
              "type": "exchange",
              "rebuild": true
            },
            "type": {
              "default": "perp",
              "type": "list",
              "options": [
                null,
                "spot",
                "perp"
              ],
              "rebuild": true
            },
            "src": {
              "default": "high/low",
              "type": "list",
              "options": [
                "open",
                "high",
                "low",
                "close",
                "hl2",
                "ohl3",
                "ohlc4",
                "hlcc4",
                "high/low",
                "low/high"
              ]
            },
            "color0": {
              "default": "rgba(0,0,0,0)",
              "type": "color"
            },
            "color1": {
              "default": "rgb(63,16,87)",
              "type": "color"
            },
            "color2": {
              "default": "rgb(76,152,134)",
              "type": "color"
            },
            "color3": {
              "default": "rgb(240,218,24)",
              "type": "color"
            },
            "volLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "atrLength": {
              "default": 20,
              "type": "range",
              "min": 1,
              "max": 200,
              "step": 1
            },
            "useHK": {
              "default": true,
              "type": "checkbox",
              "description": "Use heikinashi as source"
            },
            "useLog": {
              "default": true,
              "type": "checkbox"
            },
            "strokeWidth": {
              "default": 0,
              "type": "number",
              "description": "For debug purpose"
            }
          },
          "series": [
            "liquidation-heatmap",
            "u5dfk66q",
            "tu9ymxg5",
            "wcz139cm",
            "7snc2879",
            "rwjv6eyp",
            "fjwd8ns3",
            "238nv1gx",
            "p9v8lqf5",
            "3k569h7t",
            "tzjs5v55",
            "wvov63u7",
            "yvof3ji2",
            "o57ajyqr",
            "et3elp4x",
            "a7gb80jw",
            "nk6fbyp1"
          ],
          "displayName": "Liquidation Heatmap",
          "unsavedChanges": true
        }
      },
      "indicatorOrder": [
        "_sx7x9qvn20y0tx8g",
        "_7wdaz6pi7ln05htf"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.52
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0,
            "bottom": 0.94
          },
          "indicators": [
            "Liquidations"
          ]
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0.16
          },
          "indicators": [
            "CVD (BTC PERP)"
          ]
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.48,
            "bottom": 0.34
          },
          "indicators": [
            "CVD (BTC SPOT)"
          ]
        },
        "aggr-spot-delta": {
          "scaleMargins": {
            "top": 0.48,
            "bottom": 0.34
          },
          "indicators": [
            "Spot Delta"
          ]
        },
        "delta-stable-perp-aggr": {
          "scaleMargins": {
            "top": 0.67,
            "bottom": 0.16
          },
          "indicators": [
            "Futures Delta"
          ]
        }
      },
      "layouting": false,
      "showIndicators": false,
      "timeframe": "14400",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 8.484696644672232,
      "_id": "chart copy 5",
      "navigationState": {
        "tab": "script",
        "optionsQuery": "",
        "fontSizePx": 18
      },
      "forceNormalizePrice": false
    },
    "chart": {
      "indicatorsErrors": {},
      "indicators": {
        "price": {
          "enabled": true,
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.26
            },
            "priceLineColor": null,
            "baseLineVisible": false
          },
          "id": "price",
          "createdAt": 1657340969806,
          "updatedAt": 1714156382555,
          "series": [
            "price"
          ],
          "unsavedChanges": true,
          "displayName": "Price",
          "navigationState": {
            "sections": [
              "position",
              "colors"
            ],
            "tab": 0,
            "optionsQuery": "",
            "fontSize": 1
          },
          "preview": {},
          "optionsDefinitions": {},
          "lastPreset": "blue",
          "libraryId": "price"
        },
        "_64yf30cyjyuwgq88": {
          "id": "_64yf30cyjyuwgq88",
          "libraryId": "cvd-spot",
          "name": "CVD SPOT",
          "script": "buyVol = source(vbuy, type=spot)\nsellVol = source(vsell, type=spot)\nline(cum(buyVol - sellVol), title=SPOT)",
          "createdAt": 1623024000001,
          "updatedAt": 1714154311897,
          "options": {
            "priceScaleId": "cvdspot",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(178,181,190)",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "cvd-spot"
          ],
          "displayName": "CVD SPOT",
          "unsavedChanges": false
        },
        "_s27inspepw87p0zf": {
          "id": "_s27inspepw87p0zf",
          "libraryId": "cvd-perp",
          "name": "CVD PERP",
          "script": "buyVol = source(vbuy, type=perp)\nsellVol = source(vsell, type=perp)\nline(cum(buyVol - sellVol), title=PERP)",
          "createdAt": 1623024000001,
          "updatedAt": 1714154319881,
          "options": {
            "priceScaleId": "cvdperp",
            "priceFormat": {
              "type": "volume"
            },
            "color": "rgb(103,58,183)",
            "scaleMargins": {
              "top": 0.1,
              "bottom": 0.2
            },
            "lastValueVisible": true
          },
          "optionsDefinitions": {},
          "series": [
            "cvd-perp"
          ],
          "displayName": "CVD PERP",
          "unsavedChanges": false
        }
      },
      "indicatorOrder": [
        "price",
        "_64yf30cyjyuwgq88",
        "_s27inspepw87p0zf"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.26
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "CVD"
          ]
        },
        "liquidations": {
          "scaleMargins": {
            "top": 0.82,
            "bottom": 0.1
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "price": {
          "scaleMargins": {
            "top": 0.11,
            "bottom": 0.07
          },
          "indicators": [
            "Price"
          ],
          "priceFormat": {
            "precision": 2,
            "minMove": 0.01
          }
        },
        "cvdspot": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        },
        "cvdperp": {
          "scaleMargins": {
            "top": 0.1,
            "bottom": 0.2
          }
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "86400",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 6.105111687047862,
      "_id": "chart",
      "navigationState": {
        "tab": "options",
        "optionsQuery": "",
        "fontSizePx": 17
      }
    },
    "alerts": {
      "_id": "alerts"
    },
    "chart copy 7": {
      "indicatorsErrors": {},
      "indicators": {
        "_od1fyrj01t9v59et": {
          "id": "_od1fyrj01t9v59et",
          "libraryId": "price",
          "name": "Price",
          "script": "plotcandlestick(options.useHeikinAshi ? avg_heikinashi(bar) : options.useGaps ? avg_ohlc_with_gaps(bar) : avg_ohlc(bar))",
          "createdAt": 1657340969806,
          "updatedAt": 1714483201637,
          "options": {
            "priceScaleId": "right",
            "priceFormat": {
              "auto": true,
              "precision": 1,
              "minMove": 0.1
            },
            "priceLineVisible": false,
            "lastValueVisible": true,
            "borderVisible": true,
            "upColor": "rgba(255,255,255,0.33)",
            "downColor": "rgba(41,98,255,0.72)",
            "borderUpColor": "rgba(255,255,255,0.88)",
            "borderDownColor": "rgba(41,98,255,0.8)",
            "wickUpColor": "rgba(255,255,255,0.59)",
            "wickDownColor": "rgba(41,98,255,0.88)",
            "useGaps": false,
            "useHeikinAshi": false,
            "scaleMargins": {
              "top": 0.04,
              "bottom": 0.26
            },
            "priceLineColor": null,
            "baseLineVisible": false,
            "visible": true,
            "length": 14
          },
          "optionsDefinitions": {},
          "series": [
            "price"
          ],
          "displayName": "Price",
          "unsavedChanges": true,
          "lastPreset": "blue"
        },
        "_9b99ngtdyz9hhbj7": {
          "id": "_9b99ngtdyz9hhbj7",
          "libraryId": "chandelier-exit2",
          "name": "Chandelier Exit",
          "script": "/* eslint-disable */\n/* prettier-disable */\n\nif (dir === 0) {\n  dir = 1\n  markers = []\n}\n\n// <markers utils>\nif (pendingMarker && pendingMarker.time < time) {\n  markers.push(pendingMarker)\n  pendingMarker = null\n}\n\nvar newMarker = null\n// </markers utils>\n\nopen = $price.open \nhigh = $price.high\nlow = $price.low \nclose = $price.close \n\natr = options.mult * rma(Math.max(high - low, Math.max(Math.abs(high - close[1]), Math.abs(low - close[1]))), options.length)\nlongStop = (options.useClose ? highest(close, length) : highest(high, length)) - atr\n\nif (close[1] > longStop[1]) {\n  longStop = Math.max(longStop, longStop[1]) \n}\n\nshortStop = (options.useClose ? lowest(close, length) : lowest(low, length)) + atr\n\nif (close[1] < shortStop[1]) {\n  shortStop = Math.min(shortStop, shortStop[1]) \n}\n\nif (close > shortStop[1]) {\n  dir= 1\n}\nif (close < longStop[1]) {\n  dir= -1\n}\n\nvar ohlc4 =  (open + high + low + close) / 4\n\ncloudarea(dir == 1 ? {time: time, higherValue: ohlc4, lowerValue: longStop } : dir == -1 ? {time: time, higherValue: ohlc4, lowerValue: shortStop} : {time: time}, title=\"Stop\")\n\nif (dir == 1 && dir[1] == -1) {\n  newMarker = {\n    time: time,\n    position: 'belowBar',\n    color: options.longColor,\n    shape: 'arrowUp',\n    text: options.showLabels ? 'BUY' : undefined,\n    size: 1\n  }\n  \n  // alert for sell signal here\n} else if (dir == -1 && dir[1] == 1) {\n  newMarker = {\n    time: time,\n    position: 'aboveBar',\n    color: options.sellColor,\n    shape: 'arrowDown',\n    text: options.showLabels ? 'SELL' : undefined,\n    size: 1\n  }\n  \n  // alert for buy signal here\n}\n\n\n// <markers utils>\nif (newMarker || (pendingMarker && !newMarker)) {\n  pendingMarker = newMarker\n  \n  if (markers.length > 200) {\n    markers.splice(0, 1)\n  }\n  \n  if (series[0].setMarkers) {\n    series[0].setMarkers(markers.concat(pendingMarker))\n  }\n}\n// </markers utils>",
          "createdAt": 1704890240682,
          "updatedAt": 1714483256340,
          "options": {
            "priceScaleId": "right",
            "highlightState": true,
            "mult": 3,
            "shortColor": "rgba(183,28,28,0.45)",
            "length": 22,
            "useClose": true,
            "longColor": "rgb(110,246,115)",
            "showLabels": true,
            "higherLineColor": "rgba(129,199,132,0)",
            "positiveColor": "rgba(129,199,132,0.33)",
            "negativeColor": "rgba(183,28,28,0.33)",
            "lowerLineColor": "rgba(156,52,52,0)"
          },
          "optionsDefinitions": {},
          "series": [
            "chandelier-exit2"
          ],
          "displayName": "Chandelier Exit"
        },
        "_tngdzmcunfex4cm5": {
          "id": "_tngdzmcunfex4cm5",
          "libraryId": "vol-avg",
          "name": "VOL Δ Avg",
          "script": "avgLength = option(default=4)\nsmoothLength = option(default=3)\nveryUpColor = option(type=color,default=rgb(255,255,0))\nupColor = option(type=color,default=rgb(82,209,88))\ndownColor = option(type=color,default=rgb(242,54,69))\nveryDownColor = option(type=color,default=rgb(128,25,34))\n\nvar delta = vbuy - vsell;  // delta in USD\nvar avgDelta = sma(vbuy - vsell, avgLength);  // average delta over 'avgLength' bars\n\n// Ensure avgDelta is positive for stable division and add a small epsilon to avoid division by zero\navgDelta = Math.abs(avgDelta) + Number.EPSILON;\n\n// Adjusted normalization to include a smoothing factor (k)\nvar k = 0.5;  // Smoothing constant, adjust based on desired sensitivity\nvar normalized_delta = (delta / (2 * avgDelta * k) + 0.5);\n\n// Smoothed ratio calculation to reduce extremes\n// Using Math.max and Math.min to ensure the ratio stays between 0 and 1\nvar smoothed_ratio = Math.max(0, Math.min(1, normalized_delta));\n\n// Apply a simple moving average (SMA) or exponential moving average (EMA) for further smoothing\n// 'smoothing_length' defines the period for the moving average\nvar smoothed_ratio_sma = sma(smoothed_ratio, smoothLength);\nhistogram({\n  time: time,\n  value: vbuy + vsell,\n  color: interpolate(smoothed_ratio_sma, veryDownColor, downColor, upColor, veryUpColor)\n})",
          "createdAt": 1709502018996,
          "updatedAt": 1714483266505,
          "options": {
            "priceScaleId": "_8x3g8odw7u9j6jx5",
            "priceFormat": {
              "type": "volume"
            },
            "upColor": "rgb(82,209,88)",
            "downColor": "rgb(242,54,69)",
            "scaleMargins": {
              "top": 0.8,
              "bottom": 0
            },
            "showDelta": true,
            "upBgColor": "rgba(65,240,123,0.5)",
            "downBgColor": "rgba(49,121,245,0.5)",
            "visible": true,
            "length": 14,
            "smoothLength": 3,
            "avgLength": 4,
            "veryDownColor": "rgb(128,25,34)"
          },
          "optionsDefinitions": {
            "avgLength": {
              "default": 4,
              "type": "number"
            },
            "smoothLength": {
              "default": 3,
              "type": "number"
            },
            "veryUpColor": {
              "type": "color",
              "default": "rgb(255,255,0)"
            },
            "upColor": {
              "type": "color",
              "default": "rgb(82,209,88)"
            },
            "downColor": {
              "type": "color",
              "default": "rgb(242,54,69)"
            },
            "veryDownColor": {
              "type": "color",
              "default": "rgb(128,25,34)"
            }
          },
          "series": [
            "vol-avg"
          ],
          "displayName": "VOL Δ Avg"
        }
      },
      "indicatorOrder": [
        "_od1fyrj01t9v59et",
        "_9b99ngtdyz9hhbj7",
        "_tngdzmcunfex4cm5"
      ],
      "priceScales": {
        "right": {
          "scaleMargins": {
            "top": 0.04,
            "bottom": 0.26
          },
          "priceFormat": {
            "precision": 1,
            "minMove": 0.1
          }
        },
        "cvd": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "volume_liquidations": {
          "scaleMargins": {
            "top": 0.75,
            "bottom": 0.17
          }
        },
        "volume": {
          "scaleMargins": {
            "top": 0.84,
            "bottom": 0
          }
        },
        "_8x3g8odw7u9j6jx5": {
          "scaleMargins": {
            "top": 0.8,
            "bottom": 0
          }
        }
      },
      "layouting": false,
      "showIndicators": true,
      "timeframe": "900",
      "refreshRate": 1000,
      "showAlerts": true,
      "showAlertsLabel": true,
      "showLegend": true,
      "fillGapsWithEmpty": true,
      "showHorizontalGridlines": false,
      "horizontalGridlinesColor": "rgba(255,255,255,.1)",
      "showVerticalGridlines": false,
      "verticalGridlinesColor": "rgba(255,255,255,.1)",
      "showWatermark": true,
      "watermarkColor": "rgba(255,255,255,.1)",
      "showBorder": true,
      "borderColor": null,
      "textColor": null,
      "showLeftScale": false,
      "showRightScale": true,
      "showTimeScale": true,
      "hiddenMarkets": {},
      "barSpacing": 9.208225924791279,
      "_id": "chart copy 7"
    }
  }
}